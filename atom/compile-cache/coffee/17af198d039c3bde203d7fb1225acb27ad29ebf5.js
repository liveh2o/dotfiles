(function() {
  var $, BLANK_HASH, BlameLineComponent, HASH_LENGTH, RP, React, Reactionary, a, div, errorController, formatDate, getDefaultDate, moment, renderLoading, span, _defaultDate;

  $ = require('atom-space-pen-views').$;

  React = require('react-atom-fork');

  Reactionary = require('reactionary-atom-fork');

  div = Reactionary.div, span = Reactionary.span, a = Reactionary.a;

  RP = React.PropTypes;

  moment = require('moment');

  formatDate = require('../util/blameFormatter').formatDate;

  errorController = require('../controllers/errorController');

  HASH_LENGTH = 7;

  BLANK_HASH = '-'.repeat(HASH_LENGTH);

  _defaultDate = null;

  getDefaultDate = function() {
    return _defaultDate != null ? _defaultDate : _defaultDate = formatDate(moment("2014-01-01T13:37:00 Z"));
  };

  renderLoading = function() {
    return div({
      className: 'blame-line loading'
    }, span({
      className: 'hash'
    }, BLANK_HASH), span({
      className: 'date'
    }, getDefaultDate()), span({
      className: 'committer'
    }, 'Loading'));
  };

  BlameLineComponent = React.createClass({
    propTypes: {
      date: RP.string.isRequired,
      hash: RP.string.isRequired,
      remoteRevision: RP.object,
      author: RP.string.isRequired,
      committer: RP.string.isRequired,
      committerDate: RP.string.isRequired,
      summary: RP.string.isRequired,
      backgroundClass: RP.string,
      noCommit: RP.bool,
      showOnlyLastNames: RP.bool.isRequired
    },
    render: function() {
      var url;
      if (this.props.noCommit) {
        return div({
          className: 'blame-line no-commit text-subtle'
        }, span({
          className: 'hash'
        }, BLANK_HASH), span({
          className: 'date'
        }, this.props.date), span({
          className: 'committer'
        }, 'Nobody'));
      } else {
        return div({
          className: 'blame-line ' + this.props.backgroundClass
        }, !this.props.remoteRevision ? a({
          onClick: this.didClickHashWithoutUrl,
          className: 'hash'
        }, this.props.hash.substring(0, HASH_LENGTH)) : (url = this.props.remoteRevision.url(this.props.hash), a({
          href: url,
          target: '_blank',
          className: 'hash'
        }, this.props.hash.substring(0, HASH_LENGTH))), span({
          className: 'date'
        }, this.props.date), span({
          className: 'committer text-highlight'
        }, this.props.showOnlyLastNames ? this.props.author.split(' ').slice(-1)[0] : this.props.author));
      }
    },
    componentDidMount: function() {
      var $el;
      $el = $(this.getDOMNode());
      if (this.props.summary) {
        return atom.tooltips.add($el, {
          title: this.props.summary,
          placement: "auto left"
        });
      }
    },
    componentWillUnmount: function() {
      return $(this.getDOMNode()).tooltip("destroy");
    },
    shouldComponentUpdate: function(_arg) {
      var hash, showOnlyLastNames;
      hash = _arg.hash, showOnlyLastNames = _arg.showOnlyLastNames;
      return hash !== this.props.hash || showOnlyLastNames !== this.props.showOnlyLastNames;
    },
    didClickHashWithoutUrl: function(event, element) {
      return errorController.showError('error-no-custom-url-specified');
    }
  });

  module.exports = {
    BlameLineComponent: BlameLineComponent,
    renderLoading: renderLoading
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2FoLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvdmlld3MvYmxhbWUtbGluZS12aWV3LmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxzS0FBQTs7QUFBQSxFQUFDLElBQUssT0FBQSxDQUFRLHNCQUFSLEVBQUwsQ0FBRCxDQUFBOztBQUFBLEVBQ0EsS0FBQSxHQUFRLE9BQUEsQ0FBUSxpQkFBUixDQURSLENBQUE7O0FBQUEsRUFFQSxXQUFBLEdBQWMsT0FBQSxDQUFRLHVCQUFSLENBRmQsQ0FBQTs7QUFBQSxFQUdDLGtCQUFBLEdBQUQsRUFBTSxtQkFBQSxJQUFOLEVBQVksZ0JBQUEsQ0FIWixDQUFBOztBQUFBLEVBSUEsRUFBQSxHQUFLLEtBQUssQ0FBQyxTQUpYLENBQUE7O0FBQUEsRUFLQSxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVIsQ0FMVCxDQUFBOztBQUFBLEVBTUMsYUFBYyxPQUFBLENBQVEsd0JBQVIsRUFBZCxVQU5ELENBQUE7O0FBQUEsRUFPQSxlQUFBLEdBQWtCLE9BQUEsQ0FBUSxnQ0FBUixDQVBsQixDQUFBOztBQUFBLEVBU0EsV0FBQSxHQUFjLENBVGQsQ0FBQTs7QUFBQSxFQVVBLFVBQUEsR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXLFdBQVgsQ0FWYixDQUFBOztBQUFBLEVBWUEsWUFBQSxHQUFlLElBWmYsQ0FBQTs7QUFBQSxFQWFBLGNBQUEsR0FBaUIsU0FBQSxHQUFBO2tDQUNmLGVBQUEsZUFBZ0IsVUFBQSxDQUFXLE1BQUEsQ0FBTyx1QkFBUCxDQUFYLEVBREQ7RUFBQSxDQWJqQixDQUFBOztBQUFBLEVBaUJBLGFBQUEsR0FBZ0IsU0FBQSxHQUFBO1dBQ2QsR0FBQSxDQUFJO0FBQUEsTUFBQSxTQUFBLEVBQVcsb0JBQVg7S0FBSixFQUNFLElBQUEsQ0FBSztBQUFBLE1B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

//# sourceURL=/Users/ah/.atom/packages/git-blame/lib/views/blame-line-view.coffee
