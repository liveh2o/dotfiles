(function() {
  describe("sorting lines", function() {
    var activationPromise, editor, editorView, ref, sortLineCaseInsensitive, sortLines, sortLinesNatural, sortLinesReversed, uniqueLines;
    ref = [], activationPromise = ref[0], editor = ref[1], editorView = ref[2];
    sortLines = function(callback) {
      atom.commands.dispatch(editorView, "sort-lines:sort");
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(callback);
    };
    sortLinesReversed = function(callback) {
      atom.commands.dispatch(editorView, "sort-lines:reverse-sort");
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(callback);
    };
    uniqueLines = function(callback) {
      atom.commands.dispatch(editorView, "sort-lines:unique");
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(callback);
    };
    sortLineCaseInsensitive = function(callback) {
      atom.commands.dispatch(editorView, "sort-lines:case-insensitive-sort");
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(callback);
    };
    sortLinesNatural = function(callback) {
      atom.commands.dispatch(editorView, "sort-lines:natural");
      waitsForPromise(function() {
        return activationPromise;
      });
      return runs(callback);
    };
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.workspace.open();
      });
      return runs(function() {
        editor = atom.workspace.getActiveTextEditor();
        editorView = atom.views.getView(editor);
        return activationPromise = atom.packages.activatePackage('sort-lines');
      });
    });
    describe("when no lines are selected", function() {
      it("sorts all lines", function() {
        editor.setText("Hydrogen\nHelium\nLithium");
        editor.setCursorBufferPosition([0, 0]);
        return sortLines(function() {
          return expect(editor.getText()).toBe("Helium\nHydrogen\nLithium");
        });
      });
      it("sorts all lines, ignoring the trailing new line", function() {
        editor.setText("Hydrogen\nHelium\nLithium\n");
        editor.setCursorBufferPosition([0, 0]);
        return sortLines(function() {
          return expect(editor.getText()).toBe("Helium\nHydrogen\nLithium\n");
        });
      });
      return it("gracefully handles attempt to sort an empty editor", function() {
        editor.setText("");
        editor.setCursorBufferPosition([0, 0]);
        return sortLines(function() {
          return expect(editor.getText()).toBe("");
        });
      });
    });
    describe("when entire lines are selected", function() {
      return it("sorts the selected lines", function() {
        editor.setText("Hydrogen\nHelium\nLithium\nBeryllium\nBoron");
        editor.setSelectedBufferRange([[1, 0], [4, 0]]);
        return sortLines(function() {
          return expect(editor.getText()).toBe("Hydrogen\nBeryllium\nHelium\nLithium\nBoron");
        });
      });
    });
    describe("when partial lines are selected", function() {
      return it("sorts the selected lines", function() {
        editor.setText("Hydrogen\nHelium\nLithium\nBeryllium\nBoron");
        editor.setSelectedBufferRange([[1, 3], [3, 2]]);
        return sortLines(function() {
          return expect(editor.getText()).toBe("Hydrogen\nBeryllium\nHelium\nLithium\nBoron");
        });
      });
    });
    describe("when there are multiple selection ranges", function() {
      return it("sorts the lines in each selection range", function() {
        editor.setText("Hydrogen\nHelium    # selection 1\nBeryllium # selection 1\nCarbon\nFluorine  # selection 2\nAluminum  # selection 2\nGallium\nEuropium");
        editor.addSelectionForBufferRange([[1, 0], [3, 0]]);
        editor.addSelectionForBufferRange([[4, 0], [6, 0]]);
        return sortLines(function() {
          return expect(editor.getText()).toBe("Hydrogen\nBeryllium # selection 1\nHelium    # selection 1\nCarbon\nAluminum  # selection 2\nFluorine  # selection 2\nGallium\nEuropium");
        });
      });
    });
    describe("reversed sorting", function() {
      return it("sorts all lines in reverse order", function() {
        editor.setText("Hydrogen\nHelium\nLithium");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesReversed(function() {
          return expect(editor.getText()).toBe("Lithium\nHydrogen\nHelium");
        });
      });
    });
    describe("uniqueing", function() {
      it("uniques all lines but does not change order", function() {
        editor.setText("Hydrogen\nHydrogen\nHelium\nLithium\nHydrogen\nHydrogen\nHelium\nLithium\nHydrogen\nHydrogen\nHelium\nLithium\nHydrogen\nHydrogen\nHelium\nLithium");
        editor.setCursorBufferPosition([0, 0]);
        return uniqueLines(function() {
          return expect(editor.getText()).toBe("Hydrogen\nHelium\nLithium");
        });
      });
      return it("uniques all lines using CRLF line-endings", function() {
        editor.setText("Hydrogen\r\nHydrogen\r\nHelium\r\nLithium\r\nHydrogen\r\nHydrogen\r\nHelium\r\nLithium\r\nHydrogen\r\nHydrogen\r\nHelium\r\nLithium\r\nHydrogen\r\nHydrogen\r\nHelium\r\nLithium\r\n");
        editor.setCursorBufferPosition([0, 0]);
        return uniqueLines(function() {
          return expect(editor.getText()).toBe("Hydrogen\r\nHelium\r\nLithium\r\n");
        });
      });
    });
    describe("case-insensitive sorting", function() {
      return it("sorts all lines, ignoring case", function() {
        editor.setText("Hydrogen\nlithium\nhelium\nHelium\nLithium");
        editor.setCursorBufferPosition([0, 0]);
        return sortLineCaseInsensitive(function() {
          return expect(editor.getText()).toBe("helium\nHelium\nHydrogen\nlithium\nLithium");
        });
      });
    });
    return describe("natural sorting", function() {
      it("orders by leading numerals", function() {
        editor.setText("4a\n1a\n2a\n12a\n3a\n0a");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("0a\n1a\n2a\n3a\n4a\n12a");
        });
      });
      it("orders by word", function() {
        editor.setText("1Hydrogen1\n1Beryllium1\n1Carbon1");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("1Beryllium1\n1Carbon1\n1Hydrogen1");
        });
      });
      it("orders by trailing numeral", function() {
        editor.setText("a4\na0\na12\na1\na2\na3");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("a0\na1\na2\na3\na4\na12");
        });
      });
      it("orders by leading numeral before word", function() {
        editor.setText("4b\n3a\n2b\n1a");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("1a\n2b\n3a\n4b");
        });
      });
      it("orders by word before trailing number", function() {
        editor.setText("c2\na4\nd1\nb3");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("a4\nb3\nc2\nd1");
        });
      });
      it("properly handles leading zeros", function() {
        editor.setText("a01\na001\na003\na002\na02");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("a001\na002\na003\na01\na02");
        });
      });
      it("properly handles simple numerics", function() {
        editor.setText("10\n9\n2\n1\n4");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("1\n2\n4\n9\n10");
        });
      });
      it("properly handles floats", function() {
        editor.setText("10.0401\n10.022\n10.042\n10.021999");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("10.021999\n10.022\n10.0401\n10.042");
        });
      });
      it("properly handles float & decimal notation", function() {
        editor.setText("10.04f\n10.039F\n10.038d\n10.037D");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("10.037D\n10.038d\n10.039F\n10.04f");
        });
      });
      it("properly handles scientific notation", function() {
        editor.setText("1.528535048e5\n1.528535047e7\n1.528535049e3");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("1.528535049e3\n1.528535048e5\n1.528535047e7");
        });
      });
      it("properly handles ip addresses", function() {
        editor.setText("192.168.0.100\n192.168.0.1\n192.168.1.1");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("192.168.0.1\n192.168.0.100\n192.168.1.1");
        });
      });
      it("properly handles filenames", function() {
        editor.setText("car.mov\n01alpha.sgi\n001alpha.sgi\nmy.string_41299.tif");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("001alpha.sgi\n01alpha.sgi\ncar.mov\nmy.string_41299.tif");
        });
      });
      it("properly handles dates", function() {
        editor.setText("10/12/2008\n10/11/2008\n10/11/2007\n10/12/2007");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("10/11/2007\n10/12/2007\n10/11/2008\n10/12/2008");
        });
      });
      return it("properly handles money", function() {
        editor.setText("$10002.00\n$10001.02\n$10001.01");
        editor.setCursorBufferPosition([0, 0]);
        return sortLinesNatural(function() {
          return expect(editor.getText()).toBe("$10001.01\n$10001.02\n$10002.00");
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
