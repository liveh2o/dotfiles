(function() {
  var RSpecView, url;

  url = require('url');

  RSpecView = require('./rspec-view');

  module.exports = {
    configDefaults: {
      command: "rspec"
    },
    activate: function(state) {
      if (state != null) {
        this.lastFile = state.lastFile;
        this.lastLine = state.lastLine;
      }
      atom.config.setDefaults("atom-rspec", {
        command: "rspec"
      });
      atom.workspaceView.command('rspec:run', (function(_this) {
        return function() {
          return _this.run();
        };
      })(this));
      atom.workspaceView.command('rspec:run-for-line', (function(_this) {
        return function() {
          return _this.runForLine();
        };
      })(this));
      atom.workspaceView.command('rspec:run-last', (function(_this) {
        return function() {
          return _this.runLast();
        };
      })(this));
      return atom.workspace.registerOpener(function(uriToOpen) {
        var pathname, protocol, _ref;
        _ref = url.parse(uriToOpen), protocol = _ref.protocol, pathname = _ref.pathname;
        if (protocol !== 'rspec-output:') {
          return;
        }
        return new RSpecView(pathname);
      });
    },
    rspecView: null,
    deactivate: function() {
      return this.rspecView.destroy();
    },
    serialize: function() {
      return {
        rspecViewState: this.rspecView.serialize(),
        lastFile: this.lastFile,
        lastLine: this.lastLine
      };
    },
    openUriFor: function(file, lineNumber) {
      var previousActivePane, uri;
      this.lastFile = file;
      this.lastLine = lineNumber;
      previousActivePane = atom.workspace.getActivePane();
      uri = "rspec-output://" + file;
      return atom.workspace.open(uri, {
        split: 'right',
        changeFocus: false,
        searchAllPanes: true
      }).done(function(rspecView) {
        if (rspecView instanceof RSpecView) {
          rspecView.run(lineNumber);
          return previousActivePane.activate();
        }
      });
    },
    runForLine: function() {
      var cursor, editor, line;
      console.log("Starting runForLine...");
      editor = atom.workspace.getActiveEditor();
      console.log("Editor", editor);
      if (editor == null) {
        return;
      }
      cursor = editor.getCursor();
      console.log("Cursor", cursor);
      line = cursor.getScreenRow();
      console.log("Line", line);
      return this.openUriFor(editor.getPath(), line);
    },
    runLast: function() {
      if (this.lastFile == null) {
        return;
      }
      return this.openUriFor(this.lastFile, this.lastLine);
    },
    run: function() {
      var editor;
      console.log("RUN");
      editor = atom.workspace.getActiveEditor();
      if (editor == null) {
        return;
      }
      return this.openUriFor(editor.getPath());
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGNBQUE7O0FBQUEsRUFBQSxHQUFBLEdBQU0sT0FBQSxDQUFRLEtBQVIsQ0FBTixDQUFBOztBQUFBLEVBRUEsU0FBQSxHQUFZLE9BQUEsQ0FBUSxjQUFSLENBRlosQ0FBQTs7QUFBQSxFQUlBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxJQUFBLGNBQUEsRUFDRTtBQUFBLE1BQUEsT0FBQSxFQUFTLE9BQVQ7S0FERjtBQUFBLElBR0EsUUFBQSxFQUFVLFNBQUMsS0FBRCxHQUFBO0FBQ1IsTUFBQSxJQUFHLGFBQUg7QUFDRSxRQUFBLElBQUMsQ0FBQSxRQUFELEdBQVksS0FBSyxDQUFDLFFBQWxCLENBQUE7QUFBQSxRQUNBLElBQUMsQ0FBQSxRQUFELEdBQVksS0FBSyxDQUFDLFFBRGxCLENBREY7T0FBQTtBQUFBLE1BSUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFaLENBQXdCLFlBQXhCLEVBQ0U7QUFBQSxRQUFBLE9BQUEsRUFBUyxPQUFUO09BREYsQ0FKQSxDQUFBO0FBQUEsTUFPQSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQW5CLENBQTJCLFdBQTNCLEVBQWlELENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFBLEdBQUE7aUJBQUcsS0FBQyxDQUFBLEdBQUQsQ0FBQSxFQUFIO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBakQsQ0FQQSxDQUFBO0FBQUEsTUFRQSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQW5CLENBQTJCLG9CQUEzQixFQUFpRCxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQSxHQUFBO2lCQUFHLEtBQUMsQ0FBQSxVQUFELENBQUEsRUFBSDtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpELENBUkEsQ0FBQTtB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
//# sourceURL=/Users/ah/.atom/packages/rspec/lib/rspec.coffee