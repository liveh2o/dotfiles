(function() {
  describe('Pretty JSON', function() {
    var PrettyJSON;
    PrettyJSON = [][0];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-json');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-gfm');
      });
      return waitsForPromise(function() {
        return atom.packages.activatePackage('pretty-json').then(function(pack) {
          return PrettyJSON = pack.mainModule;
        });
      });
    });
    describe('when prettifying large data file', function() {
      return it('does not crash', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('large.json').then(function(editor) {
            return PrettyJSON.prettify(editor, {
              sorted: false
            });
          });
        });
      });
    });
    describe('when prettifying large integers', function() {
      return it('does not truncate integers', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('bigint.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("{\n  \"bigint\": 6926665213734576388,\n  \"float\": 1.23456e-10\n}");
          });
        });
      });
    });
    describe('when no text is selected', function() {
      return it('does not change anything', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('valid.md').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("Start\n{ \"c\": \"d\", \"a\": \"b\" }\nEnd\n");
          });
        });
      });
    });
    describe('when a valid json text is selected', function() {
      return it('formats it correctly', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('valid.md').then(function(editor) {
            editor.setSelectedBufferRange([[1, 0], [1, 22]]);
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("Start\n{\n  \"c\": \"d\",\n  \"a\": \"b\"\n}\nEnd\n");
          });
        });
      });
    });
    describe('when an invalid json text is selected', function() {
      return it('does not change anything', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('invalid.md').then(function(editor) {
            editor.setSelectedBufferRange([[1, 0], [1, 2]]);
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("Start\n{]\nEnd\n");
          });
        });
      });
    });
    describe('JSON file with invalid JSON', function() {
      return it('does not change anything', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('invalid.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("{ \"c\": \"d\", \"a\": \"b\", }\n");
          });
        });
      });
    });
    describe('JSON file with valid JSON', function() {
      return it('formats the whole file correctly', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('valid.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("{\n  \"c\": \"d\",\n  \"a\": \"b\"\n}");
          });
        });
      });
    });
    describe('Sort and prettify JSON file with invalid JSON', function() {
      return it('does not change anything', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('invalid.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: true
            });
            return expect(editor.getText()).toBe("{ \"c\": \"d\", \"a\": \"b\", }\n");
          });
        });
      });
    });
    describe('Sort and prettify JSON file with valid JSON', function() {
      return it('formats the whole file correctly', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('valid.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: true
            });
            return expect(editor.getText()).toBe("{\n  \"a\": \"b\",\n  \"c\": \"d\"\n}");
          });
        });
      });
    });
    describe('Minify JSON file with invalid JSON', function() {
      return it('does not change anything', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('invalid.json').then(function(editor) {
            PrettyJSON.minify(editor);
            return expect(editor.getText()).toBe("{ \"c\": \"d\", \"a\": \"b\", }\n");
          });
        });
      });
    });
    describe('Minify JSON file with valid JSON', function() {
      return it('formats the whole file correctly', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('valid.json').then(function(editor) {
            PrettyJSON.minify(editor);
            return expect(editor.getText()).toBe("{\"c\":\"d\",\"a\":\"b\"}");
          });
        });
      });
    });
    describe('Minify selected JSON', function() {
      return it('Minifies JSON data', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('valid.md').then(function(editor) {
            editor.setSelectedBufferRange([[1, 0], [1, 22]]);
            PrettyJSON.minify(editor);
            return expect(editor.getText()).toBe("Start\n{\"c\":\"d\",\"a\":\"b\" }\nEnd\n");
          });
        });
      });
    });
    describe('JSON file with valid JavaScript Object Literal', function() {
      return it('jsonifies file correctly', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('object.json').then(function(editor) {
            PrettyJSON.jsonify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("{\n  \"c\": 3,\n  \"a\": 1\n}");
          });
        });
      });
    });
    describe('JSON file with valid JavaScript Object Literal', function() {
      return it('jsonifies and sorts file correctly', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('object.json').then(function(editor) {
            PrettyJSON.jsonify(editor, {
              sorted: true
            });
            return expect(editor.getText()).toBe("{\n  \"a\": 1,\n  \"c\": 3\n}");
          });
        });
      });
    });
    describe('Sort and prettify JSON file with BigNumbers', function() {
      return it('does not destroy formatting of numbers', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('stats.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: true
            });
            return expect(editor.getText()).toBe("{\n  \"DV\": [\n    {\n      \"BC\": 100,\n      \"Chromosome\": \"chr22\",\n      \"PopulationFrequencyEthnicBackground\": \"20.316622691292874\",\n      \"PopulationFrequencyGeneral\": \"29.716117216117215\",\n      \"RQ\": null,\n      \"ZW\": [\n      ]\n    }\n  ]\n}");
          });
        });
      });
    });
    describe('when a valid json text is selected', function() {
      return it('formats it correctly, and selects the formatted text', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('selected.json').then(function(editor) {
            var range;
            editor.setSelectedBufferRange([[0, 0], [0, 32]]);
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            expect(editor.getText()).toBe("{\n  \"key\": {\n    \"key\": {\n      \"key\": \"value\"\n    }\n  }\n}\n");
            range = editor.getSelectedBufferRange();
            expect(range.start.row).toBe(0);
            expect(range.start.column).toBe(0);
            expect(range.end.row).toBe(6);
            return expect(range.end.column).toBe(1);
          });
        });
      });
    });
    xdescribe('when sorting and prettifying floating point numbers', function() {
      return it('does not turn them into strings', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('floating.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: true
            });
            return expect(editor.getText()).toBe("{\n  \"floating_point\": -0.6579373322603248\n}");
          });
        });
      });
    });
    return xdescribe('when prettifying whole numbers represented as floating point', function() {
      return it('does not turn them into whole numbers', function() {
        return waitsForPromise(function() {
          return atom.workspace.open('number.json').then(function(editor) {
            PrettyJSON.prettify(editor, {
              sorted: false
            });
            return expect(editor.getText()).toBe("{\n  \"int\": 6.0\n}");
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
