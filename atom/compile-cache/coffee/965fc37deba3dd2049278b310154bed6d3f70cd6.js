(function() {
  var ShowTodo, TodoModel, TodoRegex, path, sample1Path;

  path = require('path');

  TodoModel = require('../lib/todo-model');

  ShowTodo = require('../lib/show-todo');

  TodoRegex = require('../lib/todo-regex');

  sample1Path = path.join(__dirname, 'fixtures/sample1');

  describe("Todo Model", function() {
    var match, todoRegex, _ref;
    _ref = [], match = _ref.match, todoRegex = _ref.todoRegex;
    beforeEach(function() {
      atom.project.setPaths([sample1Path]);
      todoRegex = new TodoRegex(ShowTodo.config.findUsingRegex["default"], ['FIXME', 'TODO']);
      return match = {
        all: " TODO: Comment in C #tag1 ",
        loc: "" + (atom.project.getPaths()[0]) + "/sample1/sample.c",
        regex: todoRegex.regex,
        regexp: todoRegex.regexp,
        position: [[0, 1], [0, 20]]
      };
    });
    describe("Create todo models", function() {
      it("should handle results from workspace scan (also tested in fetchRegexItem)", function() {
        var model;
        delete match.regexp;
        model = new TodoModel(match);
        return expect(model.text).toEqual("TODO: Comment in C");
      });
      it("should remove regex part", function() {
        var model;
        model = new TodoModel(match);
        return expect(model.text).toEqual("Comment in C");
      });
      it("should serialize range, relativize path and extract basename", function() {
        var model;
        model = new TodoModel(match);
        expect(model.path).toEqual('sample1/sample.c');
        expect(model.file).toEqual('sample.c');
        return expect(model.range).toEqual('0,1,0,20');
      });
      it("should handle invalid match position", function() {
        var model;
        delete match.position;
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [[0, 1]];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,1');
        expect(model.position).toEqual([[0, 1]]);
        match.position = [[0, 1], [2, 3]];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,1,2,3');
        return expect(model.position).toEqual([[0, 1], [2, 3]]);
      });
      it("should handle invalid match position with no matchText", function() {
        var model;
        match.all = "TODO";
        delete match.position;
        model = new TodoModel(match);
        expect(model.text).toEqual('No details');
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = [];
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        expect(model.position).toEqual([[0, 0]]);
        match.position = true;
        model = new TodoModel(match);
        expect(model.range).toEqual('0,0');
        return expect(model.position).toEqual([[0, 0]]);
      });
      it("should handle dot after todo", function() {
        var model;
        match.all = "// TODO. comment";
        model = new TodoModel(match);
        return expect(model.text).toBe('comment');
      });
      it("should handle semicolon after todo", function() {
        var model;
        match.all = "// TODO; comment";
        model = new TodoModel(match);
        return expect(model.text).toBe('comment');
      });
      it('respects imdone syntax', function() {
        var model;
        match.all = "// TODO:10 todo1";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('todo1');
      });
      it('respects imdone syntax zero', function() {
        var model;
        match.all = "// TODO:0 todo2";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('todo2');
      });
      it('handles number in todo', function() {
        var model;
        match.all = "Line 1 //TODO: 1 2 3";
        model = new TodoModel(match);
        return expect(model.text).toBe('1 2 3');
      });
      it('handles number in todo (as long as its not without space)', function() {
        var model;
        match.all = "Line 2 //TODO:1 2 3";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('2 3');
      });
      it('handles empty todos', function() {
        var model;
        match.all = "Line 1 //TODO";
        match.position = [[0, 9], [0, 13]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 1');
      });
      it('handles empty todos with other comment characters', function() {
        var model;
        match.all = "Line 2 # TODO";
        match.position = [[0, 9], [0, 13]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 2');
      });
      it('handles empty todos with separator', function() {
        var model;
        match.all = "Line 3 // TODO.";
        match.position = [[0, 9], [0, 14]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 3');
      });
      it('handles empty todos with colon separator', function() {
        var model;
        match.all = "Line 4 // TODO:";
        match.position = [[0, 10], [0, 14]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 4');
      });
      it('handles empty block todos', function() {
        var model;
        match.all = "Line 5 /* TODO */ ";
        match.position = [[0, 9], [0, 19]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('Line 5');
      });
      it('handles completely empty todos', function() {
        var model;
        match.all = "// TODO";
        match.position = [[0, 2], [0, 7]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles completely empty todos with separator', function() {
        var model;
        match.all = "// TODO.";
        match.position = [[0, 2], [0, 8]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles completely empty block todos', function() {
        var model;
        match.all = " /* TODO */ ";
        match.position = [[0, 3], [0, 12]];
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        return expect(model.text).toBe('No details');
      });
      it('handles todos with @ in front', function() {
        var model;
        match.all = "Line 1 // @TODO: text 1";
        model = new TodoModel(match);
        return expect(model.text).toBe('text 1');
      });
      it('handles todos with @ in front', function() {
        var model;
        match.all = "Line 2 @TODO: text 2";
        model = new TodoModel(match);
        return expect(model.text).toBe('text 2');
      });
      it('handles tabs in todos', function() {
        var model;
        match.all = "Line //TODO:\ttext";
        model = new TodoModel(match);
        return expect(model.text).toBe('text');
      });
      it('handles todo without semicolon', function() {
        var model;
        match.all = "A line // TODO text";
        model = new TodoModel(match);
        return expect(model.text).toBe('text');
      });
      it('stops with invalid todos', function() {
        var model, text;
        text = "A line // TODO:text";
        match.all = text;
        model = new TodoModel(match);
        expect(model.type).toBe(void 0);
        return expect(model.text).toBe(text);
      });
      it('extracts project name', function() {
        var model;
        model = new TodoModel(match);
        return expect(model.project).toBe('sample1');
      });
      it('handles non-existing projects', function() {
        var model;
        atom.project.setPaths([]);
        model = new TodoModel(match);
        expect(model.project).toBe('');
        expect(model.file).toBe('sample.c');
        return expect(model.path).toBe(match.loc);
      });
      return it('handles files not in project', function() {
        var model;
        match.loc = 'nonexisting/sample.c';
        model = new TodoModel(match);
        expect(model.project).toBe('');
        expect(model.file).toBe('sample.c');
        return expect(model.path).toBe(match.loc);
      });
    });
    describe("Extracting todo tags", function() {
      it("should extract todo tags", function() {
        var model;
        match.text = "test #TODO: 123 #tag1";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "#TODO: 123 #tag1.";
        expect(new TodoModel(match).tags).toBe('tag1');
        match.text = "  TODO: 123 #tag1  ";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "<!-- TODO: 123 #tag1   --> ";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1');
        expect(model.text).toBe('123');
        match.text = "<!-- TODO: Fix this link. #bug. -->";
        model = new TodoModel(match);
        expect(model.tags).toBe('bug');
        return expect(model.text).toBe('Fix this link.');
      });
      it("should extract multiple todo tags", function() {
        var model;
        match.text = "TODO: 123 #tag1 #tag2 #tag3";
        model = new TodoModel(match);
        expect(model.tags).toBe('tag1, tag2, tag3');
        expect(model.text).toBe('123');
        match.text = "test #TODO: 123 #tag1, #tag2";
        expect(new TodoModel(match).tags).toBe('tag1, tag2');
        match.text = "TODO: #123 #tag1";
        model = new TodoModel(match);
        expect(model.tags).toBe('123, tag1');
        return expect(model.text).toBe('No details');
      });
      return it("should handle invalid tags", function() {
        match.text = "#TODO: 123 #tag1 X";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: 123 #tag1#";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1 todo";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag.123";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1 #tag2@";
        expect(new TodoModel(match).tags).toBe('');
        match.text = "#TODO: #tag1, #tag2$, #tag3";
        return expect(new TodoModel(match).tags).toBe('tag3');
      });
    });
    describe("Handling google style guide todo syntax", function() {
      it("adds an id to the model", function() {
        var model;
        match.all = "// TODO(kl@gmail.com): Use a *.";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('kl@gmail.com');
        return expect(model.text).toBe('Use a *.');
      });
      it("handles plain name", function() {
        var model;
        match.all = "// TODO(Zeke) change this to use relations.";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('Zeke');
        return expect(model.text).toBe('change this to use relations.');
      });
      it("handles spaces", function() {
        var model;
        match.all = "// TODO(bug 12345): remove the \"Last visitors\" feature";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('bug 12345');
        return expect(model.text).toBe('remove the "Last visitors" feature');
      });
      it("handles parentheses in text", function() {
        var model;
        match.all = "// TODO(bug): another task (seriously)";
        model = new TodoModel(match);
        expect(model.type).toBe('TODO');
        expect(model.id).toBe('bug');
        return expect(model.text).toBe('another task (seriously)');
      });
      it("handles long ids with empty todos", function() {
        var model;
        match.all = "// TODO(id: Use a *.)";
        match.position = [[0, 2], [0, 21]];
        model = new TodoModel(match);
        expect(model.id).toBe('id: Use a *.');
        return expect(model.text).toBe('No details');
      });
      it("handles invalid todo id format", function() {
        var model;
        match.all = "// TODO(id: Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('(id: Use a *.');
      });
      it("handles invalid id with underscore", function() {
        var model;
        match.all = "// TODO _(id): Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('_(id): Use a *.');
      });
      return it("handles invalid id with space", function() {
        var model;
        match.all = "// TODO (id): Use a *.";
        model = new TodoModel(match);
        expect(model.id).toBe('');
        return expect(model.text).toBe('(id): Use a *.');
      });
    });
    return describe("Model properties", function() {
      it("returns value for key", function() {
        var model;
        model = new TodoModel(match);
        expect(model.get('All')).toBe(match.all);
        expect(model.get('Text')).toBe('Comment in C');
        expect(model.get('Type')).toBe('TODO');
        expect(model.get('Range')).toBe('0,1,0,20');
        expect(model.get('Line')).toBe('1');
        expect(model.get('Regex')).toBe('/\\b(TODO)[:;.,]?\\d*($|\\s.*$|\\(.*$)/g');
        expect(model.get('Path')).toBe('sample1/sample.c');
        expect(model.get('File')).toBe('sample.c');
        expect(model.get('Tags')).toBe('tag1');
        expect(model.get('Id')).toBe('');
        expect(model.get('Project')).toBe('sample1');
        return expect(model.get('RegExp')).toBe(match.regexp);
      });
      it("defaults to text", function() {
        var model;
        model = new TodoModel(match);
        expect(model.get()).toBe('Comment in C');
        expect(model.get('NONEXISTING')).toBe('Comment in C');
        delete match.all;
        delete match.text;
        model = new TodoModel(match);
        expect(model.get()).toBe('No details');
        delete model.all;
        delete model.text;
        return expect(model.get()).toBe('No details');
      });
      return it("searches for strings", function() {
        var model;
        model = new TodoModel(match);
        expect(model.contains('Comment')).toBe(true);
        expect(model.contains('TODO')).toBe(false);
        atom.config.set('todo-show.showInTable', ['Text', 'Type', 'Line']);
        model = new TodoModel(match);
        expect(model.contains('Comment')).toBe(true);
        expect(model.contains('TODO')).toBe(true);
        expect(model.contains('1')).toBe(true);
        expect(model.contains('sample.c')).toBe(false);
        expect(model.contains('0,1')).toBe(false);
        expect(model.contains('')).toBe(true);
        return expect(model.contains()).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/ah/.atom/packages/todo-show/spec/todo-model-spec.coffee
