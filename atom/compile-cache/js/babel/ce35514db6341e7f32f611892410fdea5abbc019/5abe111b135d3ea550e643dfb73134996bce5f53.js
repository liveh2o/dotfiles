Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getChunks = getChunks;
exports.getChunksByProjects = getChunksByProjects;
exports.mergeChange = mergeChange;
exports.calculateDecorations = calculateDecorations;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../helpers');

function getChunks(filePath, projectPath) {
  var toReturn = [];
  var chunks = filePath.split(_path2['default'].sep);
  while (chunks.length) {
    var currentPath = chunks.join(_path2['default'].sep);
    toReturn.push(currentPath);
    if (currentPath === projectPath) {
      break;
    }
    chunks.pop();
  }
  return toReturn;
}

function getChunksByProjects(filePath, projectPaths) {
  if (projectPaths.length < 3) {
    if (filePath.indexOf(projectPaths[0]) === 0) {
      return getChunks(filePath, projectPaths[0]);
    }
    if (filePath.indexOf(projectPaths[1]) === 0) {
      return getChunks(filePath, projectPaths[1]);
    }
    if (filePath.indexOf(projectPaths[2]) === 0) {
      return getChunks(filePath, projectPaths[2]);
    }
    return [filePath];
  }
  for (var i = 0, _length = projectPaths.length; i < _length; i++) {
    var projectPath = projectPaths[i];
    if (filePath.indexOf(projectPath) === 0) {
      return getChunks(filePath, projectPath);
    }
  }
  return [filePath];
}

function mergeChange(change, filePath, severity) {
  if (!change[filePath]) {
    change[filePath] = {
      info: false,
      error: false,
      warning: false
    };
  }
  change[filePath][severity] = true;
}

function calculateDecorations(decorateOnTreeView, messages) {
  var toReturn = {};
  var projectPaths = atom.project.getPaths();
  messages.forEach(function (message) {
    var filePath = (0, _helpers.$file)(message);
    if (filePath) {
      var chunks = decorateOnTreeView === 'Files' ? [filePath] : getChunksByProjects(filePath, projectPaths);
      chunks.forEach(function (chunk) {
        return mergeChange(toReturn, chunk, message.severity);
      });
    }
  });
  return toReturn;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9saW50ZXItdWktZGVmYXVsdC9saWIvdHJlZS12aWV3L2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztvQkFFaUIsTUFBTTs7Ozt1QkFDRCxZQUFZOztBQUczQixTQUFTLFNBQVMsQ0FBQyxRQUFnQixFQUFFLFdBQW1CLEVBQWlCO0FBQzlFLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQTtBQUNuQixNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZDLFNBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUNwQixRQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFLLEdBQUcsQ0FBQyxDQUFBO0FBQ3pDLFlBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDMUIsUUFBSSxXQUFXLEtBQUssV0FBVyxFQUFFO0FBQy9CLFlBQUs7S0FDTjtBQUNELFVBQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtHQUNiO0FBQ0QsU0FBTyxRQUFRLENBQUE7Q0FDaEI7O0FBRU0sU0FBUyxtQkFBbUIsQ0FBQyxRQUFnQixFQUFFLFlBQTJCLEVBQWlCO0FBQ2hHLE1BQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDM0IsUUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUMzQyxhQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDNUM7QUFDRCxRQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzNDLGFBQU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM1QztBQUNELFFBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDM0MsYUFBTyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQzVDO0FBQ0QsV0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0dBQ2xCO0FBQ0QsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTSxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE9BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUM3RCxRQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbkMsUUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN2QyxhQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUE7S0FDeEM7R0FDRjtBQUNELFNBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtDQUNsQjs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFjLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQixFQUFRO0FBQ3BGLE1BQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDckIsVUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHO0FBQ2pCLFVBQUksRUFBRSxLQUFLO0FBQ1gsV0FBSyxFQUFFLEtBQUs7QUFDWixhQUFPLEVBQUUsS0FBSztLQUNmLENBQUE7R0FDRjtBQUNELFFBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUE7Q0FDbEM7O0FBRU0sU0FBUyxvQkFBb0IsQ0FBQyxrQkFBcUQsRUFBRSxRQUE4QixFQUFVO0FBQ2xJLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQTtBQUNuQixNQUFNLFlBQTJCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtBQUMzRCxVQUFRLENBQUMsT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFO0FBQ2pDLFFBQU0sUUFBUSxHQUFHLG9CQUFNLE9BQU8sQ0FBQyxDQUFBO0FBQy9CLFFBQUksUUFBUSxFQUFFO0FBQ1osVUFBTSxNQUFNLEdBQUcsa0JBQWtCLEtBQUssT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBQ3hHLFlBQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLO2VBQUksV0FBVyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztPQUFBLENBQUMsQ0FBQTtLQUN4RTtHQUNGLENBQUMsQ0FBQTtBQUNGLFNBQU8sUUFBUSxDQUFBO0NBQ2hCIiwiZmlsZSI6Ii9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9saW50ZXItdWktZGVmYXVsdC9saWIvdHJlZS12aWV3L2hlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgJGZpbGUgfSBmcm9tICcuLi9oZWxwZXJzJ1xuaW1wb3J0IHR5cGUgeyBMaW50ZXJNZXNzYWdlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaHVua3MoZmlsZVBhdGg6IHN0cmluZywgcHJvamVjdFBhdGg6IHN0cmluZyk6IEFycmF5PHN0cmluZz4ge1xuICBjb25zdCB0b1JldHVybiA9IFtdXG4gIGNvbnN0IGNodW5rcyA9IGZpbGVQYXRoLnNwbGl0KFBhdGguc2VwKVxuICB3aGlsZSAoY2h1bmtzLmxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gY2h1bmtzLmpvaW4oUGF0aC5zZXApXG4gICAgdG9SZXR1cm4ucHVzaChjdXJyZW50UGF0aClcbiAgICBpZiAoY3VycmVudFBhdGggPT09IHByb2plY3RQYXRoKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjaHVua3MucG9wKClcbiAgfVxuICByZXR1cm4gdG9SZXR1cm5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENodW5rc0J5UHJvamVjdHMoZmlsZVBhdGg6IHN0cmluZywgcHJvamVjdFBhdGhzOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8c3RyaW5nPiB7XG4gIGlmIChwcm9qZWN0UGF0aHMubGVuZ3RoIDwgMykge1xuICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKHByb2plY3RQYXRoc1swXSkgPT09IDApIHtcbiAgICAgIHJldHVybiBnZXRDaHVua3MoZmlsZVBhdGgsIHByb2plY3RQYXRoc1swXSlcbiAgICB9XG4gICAgaWYgKGZpbGVQYXRoLmluZGV4T2YocHJvamVjdFBhdGhzWzFdKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGdldENodW5rcyhmaWxlUGF0aCwgcHJvamVjdFBhdGhzWzFdKVxuICAgIH1cbiAgICBpZiAoZmlsZVBhdGguaW5kZXhPZihwcm9qZWN0UGF0aHNbMl0pID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHNbMl0pXG4gICAgfVxuICAgIHJldHVybiBbZmlsZVBhdGhdXG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHByb2plY3RQYXRocy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb2plY3RQYXRoID0gcHJvamVjdFBhdGhzW2ldXG4gICAgaWYgKGZpbGVQYXRoLmluZGV4T2YocHJvamVjdFBhdGgpID09PSAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q2h1bmtzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtmaWxlUGF0aF1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hhbmdlKGNoYW5nZTogT2JqZWN0LCBmaWxlUGF0aDogc3RyaW5nLCBzZXZlcml0eTogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghY2hhbmdlW2ZpbGVQYXRoXSkge1xuICAgIGNoYW5nZVtmaWxlUGF0aF0gPSB7XG4gICAgICBpbmZvOiBmYWxzZSxcbiAgICAgIGVycm9yOiBmYWxzZSxcbiAgICAgIHdhcm5pbmc6IGZhbHNlLFxuICAgIH1cbiAgfVxuICBjaGFuZ2VbZmlsZVBhdGhdW3NldmVyaXR5XSA9IHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZURlY29yYXRpb25zKGRlY29yYXRlT25UcmVlVmlldzogJ0ZpbGVzIGFuZCBEaXJlY3RvcmllcycgfCAnRmlsZXMnLCBtZXNzYWdlczogQXJyYXk8TGludGVyTWVzc2FnZT4pOiBPYmplY3Qge1xuICBjb25zdCB0b1JldHVybiA9IHt9XG4gIGNvbnN0IHByb2plY3RQYXRoczogQXJyYXk8c3RyaW5nPiA9IGF0b20ucHJvamVjdC5nZXRQYXRocygpXG4gIG1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZSkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gJGZpbGUobWVzc2FnZSlcbiAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgIGNvbnN0IGNodW5rcyA9IGRlY29yYXRlT25UcmVlVmlldyA9PT0gJ0ZpbGVzJyA/IFtmaWxlUGF0aF0gOiBnZXRDaHVua3NCeVByb2plY3RzKGZpbGVQYXRoLCBwcm9qZWN0UGF0aHMpXG4gICAgICBjaHVua3MuZm9yRWFjaChjaHVuayA9PiBtZXJnZUNoYW5nZSh0b1JldHVybiwgY2h1bmssIG1lc3NhZ2Uuc2V2ZXJpdHkpKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHRvUmV0dXJuXG59XG4iXX0=