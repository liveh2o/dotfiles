Object.defineProperty(exports, '__esModule', {
  value: true
});

var _atom = require('atom');

var _helpers = require('./helpers');

var VALID_SEVERITY = new Set(['error', 'warning', 'info']);

function validateUI(ui) {
  var messages = [];

  if (ui && typeof ui === 'object') {
    if (typeof ui.name !== 'string') {
      messages.push('UI.name must be a string');
    }
    if (typeof ui.didBeginLinting !== 'function') {
      messages.push('UI.didBeginLinting must be a function');
    }
    if (typeof ui.didFinishLinting !== 'function') {
      messages.push('UI.didFinishLinting must be a function');
    }
    if (typeof ui.render !== 'function') {
      messages.push('UI.render must be a function');
    }
    if (typeof ui.dispose !== 'function') {
      messages.push('UI.dispose must be a function');
    }
  } else {
    messages.push('UI must be an object');
  }

  if (messages.length) {
    (0, _helpers.showError)('Invalid UI received', 'These issues were encountered while registering the UI named \'' + (ui && ui.name ? ui.name : 'Unknown') + '\'', messages);
    return false;
  }

  return true;
}

function validateLinter(linter, version) {
  var messages = [];

  if (linter && typeof linter === 'object') {
    if (typeof linter.name !== 'string') {
      if (version === 2) {
        messages.push('Linter.name must be a string');
      } else linter.name = 'Unknown';
    }
    if (typeof linter.scope !== 'string' || linter.scope !== 'file' && linter.scope !== 'project') {
      messages.push("Linter.scope must be either 'file' or 'project'");
    }
    if (version === 1 && typeof linter.lintOnFly !== 'boolean') {
      messages.push('Linter.lintOnFly must be a boolean');
    } else if (version === 2 && typeof linter.lintsOnChange !== 'boolean') {
      messages.push('Linter.lintsOnChange must be a boolean');
    }
    if (!Array.isArray(linter.grammarScopes)) {
      messages.push('Linter.grammarScopes must be an Array');
    }
    if (typeof linter.lint !== 'function') {
      messages.push('Linter.lint must be a function');
    }
  } else {
    messages.push('Linter must be an object');
  }

  if (messages.length) {
    (0, _helpers.showError)('Invalid Linter received', 'These issues were encountered while registering a Linter named \'' + (linter && linter.name ? linter.name : 'Unknown') + '\'', messages);
    return false;
  }

  return true;
}

function validateIndie(indie) {
  var messages = [];

  if (indie && typeof indie === 'object') {
    if (typeof indie.name !== 'string') {
      messages.push('Indie.name must be a string');
    }
  } else {
    messages.push('Indie must be an object');
  }

  if (messages.length) {
    (0, _helpers.showError)('Invalid Indie received', 'These issues were encountered while registering an Indie Linter named \'' + (indie && indie.name ? indie.name : 'Unknown') + '\'', messages);
    return false;
  }

  return true;
}

function validateMessages(linterName, entries) {
  var messages = [];

  if (Array.isArray(entries)) {
    var invalidURL = false;
    var invalidIcon = false;
    var invalidExcerpt = false;
    var invalidLocation = false;
    var invalidSeverity = false;
    var invalidSolution = false;
    var invalidReference = false;
    var invalidDescription = false;
    var invalidLinterName = false;

    for (var i = 0, _length = entries.length; i < _length; ++i) {
      var message = entries[i];
      var reference = message.reference;
      if (!invalidIcon && message.icon && typeof message.icon !== 'string') {
        invalidIcon = true;
        messages.push('Message.icon must be a string');
      }
      if (!invalidLocation && (!message.location || typeof message.location !== 'object' || typeof message.location.file !== 'string' || typeof message.location.position !== 'object' || !message.location.position)) {
        invalidLocation = true;
        messages.push('Message.location must be valid');
      } else if (!invalidLocation) {
        var range = _atom.Range.fromObject(message.location.position);
        if (Number.isNaN(range.start.row) || Number.isNaN(range.start.column) || Number.isNaN(range.end.row) || Number.isNaN(range.end.column)) {
          invalidLocation = true;
          messages.push('Message.location.position should not contain NaN coordinates');
        }
      }
      if (!invalidSolution && message.solutions && !Array.isArray(message.solutions)) {
        invalidSolution = true;
        messages.push('Message.solutions must be valid');
      }
      if (!invalidReference && reference && (typeof reference !== 'object' || typeof reference.file !== 'string' || typeof reference.position !== 'object' || !reference.position)) {
        invalidReference = true;
        messages.push('Message.reference must be valid');
      } else if (!invalidReference && reference) {
        var position = _atom.Point.fromObject(reference.position);
        if (Number.isNaN(position.row) || Number.isNaN(position.column)) {
          invalidReference = true;
          messages.push('Message.reference.position should not contain NaN coordinates');
        }
      }
      if (!invalidExcerpt && typeof message.excerpt !== 'string') {
        invalidExcerpt = true;
        messages.push('Message.excerpt must be a string');
      }
      if (!invalidSeverity && !VALID_SEVERITY.has(message.severity)) {
        invalidSeverity = true;
        messages.push("Message.severity must be 'error', 'warning' or 'info'");
      }
      if (!invalidURL && message.url && typeof message.url !== 'string') {
        invalidURL = true;
        messages.push('Message.url must be a string');
      }
      if (!invalidDescription && message.description && typeof message.description !== 'function' && typeof message.description !== 'string') {
        invalidDescription = true;
        messages.push('Message.description must be a function or string');
      }
      if (!invalidLinterName && message.linterName && typeof message.linterName !== 'string') {
        invalidLinterName = true;
        messages.push('Message.linterName must be a string');
      }
    }
  } else {
    messages.push('Linter Result must be an Array');
  }

  if (messages.length) {
    (0, _helpers.showError)('Invalid Linter Result received', 'These issues were encountered while processing messages from a linter named \'' + linterName + '\'', messages);
    return false;
  }

  return true;
}

function validateMessagesLegacy(linterName, entries) {
  var messages = [];

  if (Array.isArray(entries)) {
    var invalidFix = false;
    var invalidType = false;
    var invalidClass = false;
    var invalidRange = false;
    var invalidTrace = false;
    var invalidContent = false;
    var invalidFilePath = false;
    var invalidSeverity = false;

    for (var i = 0, _length2 = entries.length; i < _length2; ++i) {
      var message = entries[i];
      if (!invalidType && typeof message.type !== 'string') {
        invalidType = true;
        messages.push('Message.type must be a string');
      }
      if (!invalidContent && (typeof message.text !== 'string' && typeof message.html !== 'string' && !(message.html instanceof HTMLElement) || !message.text && !message.html)) {
        invalidContent = true;
        messages.push('Message.text or Message.html must have a valid value');
      }
      if (!invalidFilePath && message.filePath && typeof message.filePath !== 'string') {
        invalidFilePath = true;
        messages.push('Message.filePath must be a string');
      }
      if (!invalidRange && message.range && typeof message.range !== 'object') {
        invalidRange = true;
        messages.push('Message.range must be an object');
      } else if (!invalidRange && message.range) {
        var range = _atom.Range.fromObject(message.range);
        if (Number.isNaN(range.start.row) || Number.isNaN(range.start.column) || Number.isNaN(range.end.row) || Number.isNaN(range.end.column)) {
          invalidRange = true;
          messages.push('Message.range should not contain NaN coordinates');
        }
      }
      if (!invalidClass && message['class'] && typeof message['class'] !== 'string') {
        invalidClass = true;
        messages.push('Message.class must be a string');
      }
      if (!invalidSeverity && message.severity && !VALID_SEVERITY.has(message.severity)) {
        invalidSeverity = true;
        messages.push("Message.severity must be 'error', 'warning' or 'info'");
      }
      if (!invalidTrace && message.trace && !Array.isArray(message.trace)) {
        invalidTrace = true;
        messages.push('Message.trace must be an Array');
      }
      if (!invalidFix && message.fix && (typeof message.fix.range !== 'object' || typeof message.fix.newText !== 'string' || message.fix.oldText && typeof message.fix.oldText !== 'string')) {
        invalidFix = true;
        messages.push('Message.fix must be valid');
      }
    }
  } else {
    messages.push('Linter Result must be an Array');
  }

  if (messages.length) {
    (0, _helpers.showError)('Invalid Linter Result received', 'These issues were encountered while processing messages from a linter named \'' + linterName + '\'', messages);
    return false;
  }

  return true;
}

exports.ui = validateUI;
exports.linter = validateLinter;
exports.indie = validateIndie;
exports.messages = validateMessages;
exports.messagesLegacy = validateMessagesLegacy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9saW50ZXIvbGliL3ZhbGlkYXRlL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7b0JBRTZCLE1BQU07O3VCQUNULFdBQVc7O0FBR3JDLElBQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBOztBQUU1RCxTQUFTLFVBQVUsQ0FBQyxFQUFNLEVBQVc7QUFDbkMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBOztBQUVuQixNQUFJLEVBQUUsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLEVBQUU7QUFDaEMsUUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO0FBQy9CLGNBQVEsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtLQUMxQztBQUNELFFBQUksT0FBTyxFQUFFLENBQUMsZUFBZSxLQUFLLFVBQVUsRUFBRTtBQUM1QyxjQUFRLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLENBQUE7S0FDdkQ7QUFDRCxRQUFJLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixLQUFLLFVBQVUsRUFBRTtBQUM3QyxjQUFRLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLENBQUE7S0FDeEQ7QUFDRCxRQUFJLE9BQU8sRUFBRSxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7QUFDbkMsY0FBUSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0tBQzlDO0FBQ0QsUUFBSSxPQUFPLEVBQUUsQ0FBQyxPQUFPLEtBQUssVUFBVSxFQUFFO0FBQ3BDLGNBQVEsQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQTtLQUMvQztHQUNGLE1BQU07QUFDTCxZQUFRLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUE7R0FDdEM7O0FBRUQsTUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQ25CLDRCQUFVLHFC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T0FBTyxJQUFJLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLEFBQUMsRUFBRTtBQUN4TCxrQkFBVSxHQUFHLElBQUksQ0FBQTtBQUNqQixnQkFBUSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO09BQzNDO0tBQ0Y7R0FDRixNQUFNO0FBQ0wsWUFBUSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO0dBQ2hEOztBQUVELE1BQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUNuQiw0QkFBVSxnQ0FBZ0MscUZBQWtGLFVBQVUsU0FBSyxRQUFRLENBQUMsQ0FBQTtBQUNwSixXQUFPLEtBQUssQ0FBQTtHQUNiOztBQUVELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O1FBR2UsRUFBRSxHQUFoQixVQUFVO1FBQ1EsTUFBTSxHQUF4QixjQUFjO1FBQ0csS0FBSyxHQUF0QixhQUFhO1FBQ08sUUFBUSxHQUE1QixnQkFBZ0I7UUFDVSxjQUFjLEdBQXhDLHNCQUFzQiIsImZpbGUiOiIvVXNlcnMvYWgvLmF0b20vcGFja2FnZXMvbGludGVyL2xpYi92YWxpZGF0ZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB7IFJhbmdlLCBQb2ludCB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBzaG93RXJyb3IgfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgdHlwZSB7IFVJLCBMaW50ZXIsIE1lc3NhZ2UsIE1lc3NhZ2VMZWdhY3ksIEluZGllIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmNvbnN0IFZBTElEX1NFVkVSSVRZID0gbmV3IFNldChbJ2Vycm9yJywgJ3dhcm5pbmcnLCAnaW5mbyddKVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVVJKHVpOiBVSSk6IGJvb2xlYW4ge1xuICBjb25zdCBtZXNzYWdlcyA9IFtdXG5cbiAgaWYgKHVpICYmIHR5cGVvZiB1aSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodHlwZW9mIHVpLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKCdVSS5uYW1lIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHVpLmRpZEJlZ2luTGludGluZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWVzc2FnZXMucHVzaCgnVUkuZGlkQmVnaW5MaW50aW5nIG11c3QgYmUgYSBmdW5jdGlvbicpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgdWkuZGlkRmluaXNoTGludGluZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWVzc2FnZXMucHVzaCgnVUkuZGlkRmluaXNoTGludGluZyBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHVpLnJlbmRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWVzc2FnZXMucHVzaCgnVUkucmVuZGVyIG11c3QgYmUgYSBmdW5jdGlvbicpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgdWkuZGlzcG9zZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWVzc2FnZXMucHVzaCgnVUkuZGlzcG9zZSBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlcy5wdXNoKCdVSSBtdXN0IGJlIGFuIG9iamVjdCcpXG4gIH1cblxuICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgc2hvd0Vycm9yKCdJbnZhbGlkIFVJIHJlY2VpdmVkJywgYFRoZXNlIGlzc3VlcyB3ZXJlIGVuY291bnRlcmVkIHdoaWxlIHJlZ2lzdGVyaW5nIHRoZSBVSSBuYW1lZCAnJHt1aSAmJiB1aS5uYW1lID8gdWkubmFtZSA6ICdVbmtub3duJ30nYCwgbWVzc2FnZXMpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUxpbnRlcihsaW50ZXI6IExpbnRlciwgdmVyc2lvbjogMSB8IDIpOiBib29sZWFuIHtcbiAgY29uc3QgbWVzc2FnZXMgPSBbXVxuXG4gIGlmIChsaW50ZXIgJiYgdHlwZW9mIGxpbnRlciA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodHlwZW9mIGxpbnRlci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHZlcnNpb24gPT09IDIpIHtcbiAgICAgICAgbWVzc2FnZXMucHVzaCgnTGludGVyLm5hbWUgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgICB9IGVsc2UgbGludGVyLm5hbWUgPSAnVW5rbm93bidcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsaW50ZXIuc2NvcGUgIT09ICdzdHJpbmcnIHx8IChsaW50ZXIuc2NvcGUgIT09ICdmaWxlJyAmJiBsaW50ZXIuc2NvcGUgIT09ICdwcm9qZWN0JykpIHtcbiAgICAgIG1lc3NhZ2VzLnB1c2goXCJMaW50ZXIuc2NvcGUgbXVzdCBiZSBlaXRoZXIgJ2ZpbGUnIG9yICdwcm9qZWN0J1wiKVxuICAgIH1cbiAgICBpZiAodmVyc2lvbiA9PT0gMSAmJiB0eXBlb2YgbGludGVyLmxpbnRPbkZseSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKCdMaW50ZXIubGludE9uRmx5IG11c3QgYmUgYSBib29sZWFuJylcbiAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IDIgJiYgdHlwZW9mIGxpbnRlci5saW50c09uQ2hhbmdlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIG1lc3NhZ2VzLnB1c2goJ0xpbnRlci5saW50c09uQ2hhbmdlIG11c3QgYmUgYSBib29sZWFuJylcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGxpbnRlci5ncmFtbWFyU2NvcGVzKSkge1xuICAgICAgbWVzc2FnZXMucHVzaCgnTGludGVyLmdyYW1tYXJTY29wZXMgbXVzdCBiZSBhbiBBcnJheScpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGludGVyLmxpbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1lc3NhZ2VzLnB1c2goJ0xpbnRlci5saW50IG11c3QgYmUgYSBmdW5jdGlvbicpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1lc3NhZ2VzLnB1c2goJ0xpbnRlciBtdXN0IGJlIGFuIG9iamVjdCcpXG4gIH1cblxuICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgc2hvd0Vycm9yKCdJbnZhbGlkIExpbnRlciByZWNlaXZlZCcsIGBUaGVzZSBpc3N1ZXMgd2VyZSBlbmNvdW50ZXJlZCB3aGlsZSByZWdpc3RlcmluZyBhIExpbnRlciBuYW1lZCAnJHtsaW50ZXIgJiYgbGludGVyLm5hbWUgPyBsaW50ZXIubmFtZSA6ICdVbmtub3duJ30nYCwgbWVzc2FnZXMpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUluZGllKGluZGllOiBJbmRpZSk6IGJvb2xlYW4ge1xuICBjb25zdCBtZXNzYWdlcyA9IFtdXG5cbiAgaWYgKGluZGllICYmIHR5cGVvZiBpbmRpZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAodHlwZW9mIGluZGllLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKCdJbmRpZS5uYW1lIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlcy5wdXNoKCdJbmRpZSBtdXN0IGJlIGFuIG9iamVjdCcpXG4gIH1cblxuICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgc2hvd0Vycm9yKCdJbnZhbGlkIEluZGllIHJlY2VpdmVkJywgYFRoZXNlIGlzc3VlcyB3ZXJlIGVuY291bnRlcmVkIHdoaWxlIHJlZ2lzdGVyaW5nIGFuIEluZGllIExpbnRlciBuYW1lZCAnJHtpbmRpZSAmJiBpbmRpZS5uYW1lID8gaW5kaWUubmFtZSA6ICdVbmtub3duJ30nYCwgbWVzc2FnZXMpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1lc3NhZ2VzKGxpbnRlck5hbWU6IHN0cmluZywgZW50cmllczogQXJyYXk8TWVzc2FnZT4pOiBib29sZWFuIHtcbiAgY29uc3QgbWVzc2FnZXMgPSBbXVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGVudHJpZXMpKSB7XG4gICAgbGV0IGludmFsaWRVUkwgPSBmYWxzZVxuICAgIGxldCBpbnZhbGlkSWNvbiA9IGZhbHNlXG4gICAgbGV0IGludmFsaWRFeGNlcnB0ID0gZmFsc2VcbiAgICBsZXQgaW52YWxpZExvY2F0aW9uID0gZmFsc2VcbiAgICBsZXQgaW52YWxpZFNldmVyaXR5ID0gZmFsc2VcbiAgICBsZXQgaW52YWxpZFNvbHV0aW9uID0gZmFsc2VcbiAgICBsZXQgaW52YWxpZFJlZmVyZW5jZSA9IGZhbHNlXG4gICAgbGV0IGludmFsaWREZXNjcmlwdGlvbiA9IGZhbHNlXG4gICAgbGV0IGludmFsaWRMaW50ZXJOYW1lID0gZmFsc2VcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gZW50cmllc1tpXVxuICAgICAgY29uc3QgcmVmZXJlbmNlID0gbWVzc2FnZS5yZWZlcmVuY2VcbiAgICAgIGlmICghaW52YWxpZEljb24gJiYgbWVzc2FnZS5pY29uICYmIHR5cGVvZiBtZXNzYWdlLmljb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGludmFsaWRJY29uID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmljb24gbXVzdCBiZSBhIHN0cmluZycpXG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRMb2NhdGlvbiAmJiAoIW1lc3NhZ2UubG9jYXRpb24gfHwgdHlwZW9mIG1lc3NhZ2UubG9jYXRpb24gIT09ICdvYmplY3QnIHx8IHR5cGVvZiBtZXNzYWdlLmxvY2F0aW9uLmZpbGUgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtZXNzYWdlLmxvY2F0aW9uLnBvc2l0aW9uICE9PSAnb2JqZWN0JyB8fCAhbWVzc2FnZS5sb2NhdGlvbi5wb3NpdGlvbikpIHtcbiAgICAgICAgaW52YWxpZExvY2F0aW9uID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmxvY2F0aW9uIG11c3QgYmUgdmFsaWQnKVxuICAgICAgfSBlbHNlIGlmICghaW52YWxpZExvY2F0aW9uKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gUmFuZ2UuZnJvbU9iamVjdChtZXNzYWdlLmxvY2F0aW9uLnBvc2l0aW9uKVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHJhbmdlLnN0YXJ0LnJvdykgfHwgTnVtYmVyLmlzTmFOKHJhbmdlLnN0YXJ0LmNvbHVtbikgfHwgTnVtYmVyLmlzTmFOKHJhbmdlLmVuZC5yb3cpIHx8IE51bWJlci5pc05hTihyYW5nZS5lbmQuY29sdW1uKSkge1xuICAgICAgICAgIGludmFsaWRMb2NhdGlvbiA9IHRydWVcbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmxvY2F0aW9uLnBvc2l0aW9uIHNob3VsZCBub3QgY29udGFpbiBOYU4gY29vcmRpbmF0ZXMnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRTb2x1dGlvbiAmJiBtZXNzYWdlLnNvbHV0aW9ucyAmJiAhQXJyYXkuaXNBcnJheShtZXNzYWdlLnNvbHV0aW9ucykpIHtcbiAgICAgICAgaW52YWxpZFNvbHV0aW9uID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLnNvbHV0aW9ucyBtdXN0IGJlIHZhbGlkJylcbiAgICAgIH1cbiAgICAgIGlmICghaW52YWxpZFJlZmVyZW5jZSAmJiByZWZlcmVuY2UgJiYgKHR5cGVvZiByZWZlcmVuY2UgIT09ICdvYmplY3QnIHx8IHR5cGVvZiByZWZlcmVuY2UuZmlsZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHJlZmVyZW5jZS5wb3NpdGlvbiAhPT0gJ29iamVjdCcgfHwgIXJlZmVyZW5jZS5wb3NpdGlvbikpIHtcbiAgICAgICAgaW52YWxpZFJlZmVyZW5jZSA9IHRydWVcbiAgICAgICAgbWVzc2FnZXMucHVzaCgnTWVzc2FnZS5yZWZlcmVuY2UgbXVzdCBiZSB2YWxpZCcpXG4gICAgICB9IGVsc2UgaWYgKCFpbnZhbGlkUmVmZXJlbmNlICYmIHJlZmVyZW5jZSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFBvaW50LmZyb21PYmplY3QocmVmZXJlbmNlLnBvc2l0aW9uKVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHBvc2l0aW9uLnJvdykgfHwgTnVtYmVyLmlzTmFOKHBvc2l0aW9uLmNvbHVtbikpIHtcbiAgICAgICAgICBpbnZhbGlkUmVmZXJlbmNlID0gdHJ1ZVxuICAgICAgICAgIG1lc3NhZ2VzLnB1c2goJ01lc3NhZ2UucmVmZXJlbmNlLnBvc2l0aW9uIHNob3VsZCBub3QgY29udGFpbiBOYU4gY29vcmRpbmF0ZXMnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRFeGNlcnB0ICYmIHR5cGVvZiBtZXNzYWdlLmV4Y2VycHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGludmFsaWRFeGNlcnB0ID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmV4Y2VycHQgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRTZXZlcml0eSAmJiAhVkFMSURfU0VWRVJJVFkuaGFzKG1lc3NhZ2Uuc2V2ZXJpdHkpKSB7XG4gICAgICAgIGludmFsaWRTZXZlcml0eSA9IHRydWVcbiAgICAgICAgbWVzc2FnZXMucHVzaChcIk1lc3NhZ2Uuc2V2ZXJpdHkgbXVzdCBiZSAnZXJyb3InLCAnd2FybmluZycgb3IgJ2luZm8nXCIpXG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRVUkwgJiYgbWVzc2FnZS51cmwgJiYgdHlwZW9mIG1lc3NhZ2UudXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpbnZhbGlkVVJMID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLnVybCBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICAgIH1cbiAgICAgIGlmICghaW52YWxpZERlc2NyaXB0aW9uICYmIG1lc3NhZ2UuZGVzY3JpcHRpb24gJiYgdHlwZW9mIG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG1lc3NhZ2UuZGVzY3JpcHRpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGludmFsaWREZXNjcmlwdGlvbiA9IHRydWVcbiAgICAgICAgbWVzc2FnZXMucHVzaCgnTWVzc2FnZS5kZXNjcmlwdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24gb3Igc3RyaW5nJylcbiAgICAgIH1cbiAgICAgIGlmICghaW52YWxpZExpbnRlck5hbWUgJiYgbWVzc2FnZS5saW50ZXJOYW1lICYmIHR5cGVvZiBtZXNzYWdlLmxpbnRlck5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGludmFsaWRMaW50ZXJOYW1lID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmxpbnRlck5hbWUgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1lc3NhZ2VzLnB1c2goJ0xpbnRlciBSZXN1bHQgbXVzdCBiZSBhbiBBcnJheScpXG4gIH1cblxuICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgc2hvd0Vycm9yKCdJbnZhbGlkIExpbnRlciBSZXN1bHQgcmVjZWl2ZWQnLCBgVGhlc2UgaXNzdWVzIHdlcmUgZW5jb3VudGVyZWQgd2hpbGUgcHJvY2Vzc2luZyBtZXNzYWdlcyBmcm9tIGEgbGludGVyIG5hbWVkICcke2xpbnRlck5hbWV9J2AsIG1lc3NhZ2VzKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVNZXNzYWdlc0xlZ2FjeShsaW50ZXJOYW1lOiBzdHJpbmcsIGVudHJpZXM6IEFycmF5PE1lc3NhZ2VMZWdhY3k+KTogYm9vbGVhbiB7XG4gIGNvbnN0IG1lc3NhZ2VzID0gW11cblxuICBpZiAoQXJyYXkuaXNBcnJheShlbnRyaWVzKSkge1xuICAgIGxldCBpbnZhbGlkRml4ID0gZmFsc2VcbiAgICBsZXQgaW52YWxpZFR5cGUgPSBmYWxzZVxuICAgIGxldCBpbnZhbGlkQ2xhc3MgPSBmYWxzZVxuICAgIGxldCBpbnZhbGlkUmFuZ2UgPSBmYWxzZVxuICAgIGxldCBpbnZhbGlkVHJhY2UgPSBmYWxzZVxuICAgIGxldCBpbnZhbGlkQ29udGVudCA9IGZhbHNlXG4gICAgbGV0IGludmFsaWRGaWxlUGF0aCA9IGZhbHNlXG4gICAgbGV0IGludmFsaWRTZXZlcml0eSA9IGZhbHNlXG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGVudHJpZXNbaV1cbiAgICAgIGlmICghaW52YWxpZFR5cGUgJiYgdHlwZW9mIG1lc3NhZ2UudHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW52YWxpZFR5cGUgPSB0cnVlXG4gICAgICAgIG1lc3NhZ2VzLnB1c2goJ01lc3NhZ2UudHlwZSBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICAgIH1cbiAgICAgIGlmICghaW52YWxpZENvbnRlbnQgJiYgKCh0eXBlb2YgbWVzc2FnZS50ZXh0ICE9PSAnc3RyaW5nJyAmJiAodHlwZW9mIG1lc3NhZ2UuaHRtbCAhPT0gJ3N0cmluZycgJiYgIShtZXNzYWdlLmh0bWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpKSB8fCAoIW1lc3NhZ2UudGV4dCAmJiAhbWVzc2FnZS5odG1sKSkpIHtcbiAgICAgICAgaW52YWxpZENvbnRlbnQgPSB0cnVlXG4gICAgICAgIG1lc3NhZ2VzLnB1c2goJ01lc3NhZ2UudGV4dCBvciBNZXNzYWdlLmh0bWwgbXVzdCBoYXZlIGEgdmFsaWQgdmFsdWUnKVxuICAgICAgfVxuICAgICAgaWYgKCFpbnZhbGlkRmlsZVBhdGggJiYgbWVzc2FnZS5maWxlUGF0aCAmJiB0eXBlb2YgbWVzc2FnZS5maWxlUGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW52YWxpZEZpbGVQYXRoID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmZpbGVQYXRoIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgICAgfVxuICAgICAgaWYgKCFpbnZhbGlkUmFuZ2UgJiYgbWVzc2FnZS5yYW5nZSAmJiB0eXBlb2YgbWVzc2FnZS5yYW5nZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaW52YWxpZFJhbmdlID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLnJhbmdlIG11c3QgYmUgYW4gb2JqZWN0JylcbiAgICAgIH0gZWxzZSBpZiAoIWludmFsaWRSYW5nZSAmJiBtZXNzYWdlLnJhbmdlKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gUmFuZ2UuZnJvbU9iamVjdChtZXNzYWdlLnJhbmdlKVxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHJhbmdlLnN0YXJ0LnJvdykgfHwgTnVtYmVyLmlzTmFOKHJhbmdlLnN0YXJ0LmNvbHVtbikgfHwgTnVtYmVyLmlzTmFOKHJhbmdlLmVuZC5yb3cpIHx8IE51bWJlci5pc05hTihyYW5nZS5lbmQuY29sdW1uKSkge1xuICAgICAgICAgIGludmFsaWRSYW5nZSA9IHRydWVcbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLnJhbmdlIHNob3VsZCBub3QgY29udGFpbiBOYU4gY29vcmRpbmF0ZXMnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRDbGFzcyAmJiBtZXNzYWdlLmNsYXNzICYmIHR5cGVvZiBtZXNzYWdlLmNsYXNzICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpbnZhbGlkQ2xhc3MgPSB0cnVlXG4gICAgICAgIG1lc3NhZ2VzLnB1c2goJ01lc3NhZ2UuY2xhc3MgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgICB9XG4gICAgICBpZiAoIWludmFsaWRTZXZlcml0eSAmJiBtZXNzYWdlLnNldmVyaXR5ICYmICFWQUxJRF9TRVZFUklUWS5oYXMobWVzc2FnZS5zZXZlcml0eSkpIHtcbiAgICAgICAgaW52YWxpZFNldmVyaXR5ID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKFwiTWVzc2FnZS5zZXZlcml0eSBtdXN0IGJlICdlcnJvcicsICd3YXJuaW5nJyBvciAnaW5mbydcIilcbiAgICAgIH1cbiAgICAgIGlmICghaW52YWxpZFRyYWNlICYmIG1lc3NhZ2UudHJhY2UgJiYgIUFycmF5LmlzQXJyYXkobWVzc2FnZS50cmFjZSkpIHtcbiAgICAgICAgaW52YWxpZFRyYWNlID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLnRyYWNlIG11c3QgYmUgYW4gQXJyYXknKVxuICAgICAgfVxuICAgICAgaWYgKCFpbnZhbGlkRml4ICYmIG1lc3NhZ2UuZml4ICYmICh0eXBlb2YgbWVzc2FnZS5maXgucmFuZ2UgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBtZXNzYWdlLmZpeC5uZXdUZXh0ICE9PSAnc3RyaW5nJyB8fCAobWVzc2FnZS5maXgub2xkVGV4dCAmJiB0eXBlb2YgbWVzc2FnZS5maXgub2xkVGV4dCAhPT0gJ3N0cmluZycpKSkge1xuICAgICAgICBpbnZhbGlkRml4ID0gdHJ1ZVxuICAgICAgICBtZXNzYWdlcy5wdXNoKCdNZXNzYWdlLmZpeCBtdXN0IGJlIHZhbGlkJylcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZXMucHVzaCgnTGludGVyIFJlc3VsdCBtdXN0IGJlIGFuIEFycmF5JylcbiAgfVxuXG4gIGlmIChtZXNzYWdlcy5sZW5ndGgpIHtcbiAgICBzaG93RXJyb3IoJ0ludmFsaWQgTGludGVyIFJlc3VsdCByZWNlaXZlZCcsIGBUaGVzZSBpc3N1ZXMgd2VyZSBlbmNvdW50ZXJlZCB3aGlsZSBwcm9jZXNzaW5nIG1lc3NhZ2VzIGZyb20gYSBsaW50ZXIgbmFtZWQgJyR7bGludGVyTmFtZX0nYCwgbWVzc2FnZXMpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQge1xuICB2YWxpZGF0ZVVJIGFzIHVpLFxuICB2YWxpZGF0ZUxpbnRlciBhcyBsaW50ZXIsXG4gIHZhbGlkYXRlSW5kaWUgYXMgaW5kaWUsXG4gIHZhbGlkYXRlTWVzc2FnZXMgYXMgbWVzc2FnZXMsXG4gIHZhbGlkYXRlTWVzc2FnZXNMZWdhY3kgYXMgbWVzc2FnZXNMZWdhY3ksXG59XG4iXX0=