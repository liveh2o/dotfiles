function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _libIndieDelegate = require('../lib/indie-delegate');

var _libIndieDelegate2 = _interopRequireDefault(_libIndieDelegate);

var _common = require('./common');

describe('IndieDelegate', function () {
  var indieDelegate = undefined;
  var indieDelegateLegacy = undefined;

  beforeEach(function () {
    indieDelegate = new _libIndieDelegate2['default']({
      name: 'Indie'
    }, 2);
    indieDelegateLegacy = new _libIndieDelegate2['default']({
      name: 'Indie Legacy'
    }, 1);
  });
  afterEach(function () {
    indieDelegate.dispose();
    indieDelegateLegacy.dispose();
  });

  it('has the basic linter properties', function () {
    expect(typeof indieDelegate.name).toBe('string');
    expect(indieDelegate.name).toBe('Indie');
    expect(typeof indieDelegate.scope).toBe('string');
    expect(indieDelegate.scope).toBe('project');
  });
  describe('::setMessages && ::getMessages && ::clearMessages', function () {
    it('works as expected', function () {
      var message = (0, _common.getMessage)(false);
      expect(indieDelegate.getMessages()).toEqual([]);
      indieDelegate.setMessages(message.location.file, [message]);
      expect(indieDelegate.getMessages()).toEqual([message]);
      indieDelegate.clearMessages();
      expect(indieDelegate.getMessages()).toEqual([]);
    });
  });
  describe('::setMessages', function () {
    it('overwrites previous messages for that file', function () {
      var messageA = (0, _common.getMessage)(false);
      var messageB = (0, _common.getMessage)(false);
      var messageC = (0, _common.getMessage)(false);
      expect(indieDelegate.getMessages()).toEqual([]);
      indieDelegate.setMessages(messageA.location.file, [messageA, messageB]);
      expect(indieDelegate.getMessages()).toEqual([messageA, messageB]);
      indieDelegate.setMessages(messageA.location.file, [messageA, messageC]);
      expect(indieDelegate.getMessages()).toEqual([messageA, messageC]);
      indieDelegate.setMessages(messageA.location.file, [messageB, messageC]);
      expect(indieDelegate.getMessages()).toEqual([messageB, messageC]);
      indieDelegate.setMessages(messageA.location.file, [messageC]);
      expect(indieDelegate.getMessages()).toEqual([messageC]);
      indieDelegate.setMessages(messageA.location.file, []);
      expect(indieDelegate.getMessages()).toEqual([]);
    });
    it('does not update if is disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.dispose();
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
    });
    it('does update if not disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(2);
    });
    it('cries if message has a different filePath', function () {
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      }).not.toThrow();
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(__filename), (0, _common.getMessage)(__filename)]);
      }).not.toThrow();
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(false)]);
      }).toThrow('message.location.file does not match the given filePath');
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(false)]);
      }).toThrow('message.location.file does not match the given filePath');
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(false), (0, _common.getMessage)(__filename)]);
      }).toThrow('message.location.file does not match the given filePath');
      expect(function () {
        indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename), (0, _common.getMessage)(__filename), (0, _common.getMessage)(false)]);
      }).toThrow('message.location.file does not match the given filePath');
    });
    it('does not add invalid messages', function () {
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(0);
      indieDelegate.setMessages(__filename, [{}]);
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(1);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(indieDelegate.getMessages().length).toBe(1);
      expect(atom.notifications.getNotifications().length).toBe(1);
    });
  });
  describe('::clearMessages', function () {
    it('does not update if disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.dispose();
      indieDelegate.clearMessages();
      expect(timesUpdated).toBe(1);
    });
    it('does update if not disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setMessages(__filename, [(0, _common.getMessage)(__filename)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.clearMessages();
      expect(timesUpdated).toBe(2);
    });
  });
  describe('::setAllMessages', function () {
    it('automatically splits messages into filePath groups', function () {
      var messageA = (0, _common.getMessage)(false);
      var messageB = (0, _common.getMessage)(false);
      var messageC = (0, _common.getMessage)(false);
      var messageD = (0, _common.getMessage)(false);

      messageC.location.file = __filename;
      messageD.location.file = __filename;
      expect(indieDelegate.messages.size).toBe(0);
      indieDelegate.setAllMessages([messageA, messageB, messageC, messageD]);
      expect(indieDelegate.messages.size).toBe(2);

      var messagesA = indieDelegate.messages.get(messageA.location.file);
      expect(Array.isArray(messagesA)).toBe(true);
      expect(messagesA).toEqual([messageA, messageB]);

      var messagesB = indieDelegate.messages.get(messageC.location.file);
      expect(Array.isArray(messagesB)).toBe(true);
      expect(messagesB).toEqual([messageC, messageD]);
    });
    it('does not update if disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setAllMessages([(0, _common.getMessage)(false)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.dispose();
      indieDelegate.setAllMessages([]);
      expect(timesUpdated).toBe(1);
    });
    it('does update if not disposed', function () {
      var timesUpdated = 0;
      indieDelegate.onDidUpdate(function () {
        timesUpdated++;
      });
      expect(timesUpdated).toBe(0);
      indieDelegate.setAllMessages([(0, _common.getMessage)(false)]);
      expect(timesUpdated).toBe(1);
      indieDelegate.setAllMessages([]);
      expect(timesUpdated).toBe(2);
    });
    it('does not add invalid messages', function () {
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(0);
      indieDelegate.setAllMessages([{}]);
      expect(indieDelegate.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(1);
      indieDelegate.setAllMessages([(0, _common.getMessage)(__filename)]);
      expect(indieDelegate.getMessages().length).toBe(1);
      expect(atom.notifications.getNotifications().length).toBe(1);
    });
  });
  describe('::dispose', function () {
    it('clears messages', function () {
      indieDelegate.setAllMessages([(0, _common.getMessage)(false)]);
      expect(indieDelegate.messages.size).toBe(1);
      indieDelegate.dispose();
      expect(indieDelegate.messages.size).toBe(0);
    });
    it('emits did-destroy event', function () {
      var didDestroy = false;
      indieDelegate.onDidDestroy(function () {
        didDestroy = true;
      });
      expect(didDestroy).toBe(false);
      indieDelegate.dispose();
      expect(didDestroy).toBe(true);
    });
  });
  describe('Legacy features', function () {
    it('has a deleteMessages() has throws on newer version', function () {
      expect(function () {
        indieDelegate.deleteMessages();
      }).toThrow('Call to depreciated method deleteMessages(). Use clearMessages() insead');
    });
    it('has a setMessages() that throws when called with old signature', function () {
      expect(function () {
        indieDelegate.setMessages([]);
      }).toThrow('Invalid Parameters to setMessages()');
    });
    it('sets and clears messages properly on legacy version', function () {
      indieDelegateLegacy.setMessages([(0, _common.getMessageLegacy)(false)]);
      expect(indieDelegateLegacy.getMessages().length).toBe(1);
      indieDelegateLegacy.deleteMessages();
      expect(indieDelegateLegacy.getMessages().length).toBe(0);
    });
    it('does not add invalid messages', function () {
      expect(indieDelegateLegacy.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(0);

      indieDelegateLegacy.setMessages([{}]);
      expect(indieDelegateLegacy.getMessages().length).toBe(0);
      expect(atom.notifications.getNotifications().length).toBe(1);

      indieDelegateLegacy.setMessages([(0, _common.getMessageLegacy)(false)]);
      expect(indieDelegateLegacy.getMessages().length).toBe(1);
      expect(atom.notifications.getNotifications().length).toBe(1);
    });
  });
  describe('::onDidUpdate', function () {
    it('includes all of the messages', function () {
      var messagesA = [(0, _common.getMessage)('a'), (0, _common.getMessage)('a'), (0, _common.getMessage)('a'), (0, _common.getMessage)('a'), (0, _common.getMessage)('a')];
      var messagesB = [(0, _common.getMessage)('b'), (0, _common.getMessage)('b'), (0, _common.getMessage)('b'), (0, _common.getMessage)('b'), (0, _common.getMessage)('b')];
      var spyCallback = jasmine.createSpy('onDidUpdate');
      indieDelegate.onDidUpdate(spyCallback);
      indieDelegate.setMessages('a', messagesA);
      indieDelegate.setMessages('b', messagesB);
      indieDelegate.clearMessages();
      expect(spyCallback.calls.length).toBe(3);
      expect(spyCallback.calls[0].args[0]).toEqual(messagesA);
      expect(spyCallback.calls[1].args[0]).toEqual(messagesA.concat(messagesB));
      expect(spyCallback.calls[2].args[0]).toEqual([]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9saW50ZXIvc3BlYy9pbmRpZS1kZWxlZ2F0ZS1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O2dDQUUwQix1QkFBdUI7Ozs7c0JBQ0osVUFBVTs7QUFFdkQsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFXO0FBQ25DLE1BQUksYUFBYSxZQUFBLENBQUE7QUFDakIsTUFBSSxtQkFBbUIsWUFBQSxDQUFBOztBQUV2QixZQUFVLENBQUMsWUFBVztBQUNwQixpQkFBYSxHQUFHLGtDQUFrQjtBQUNoQyxVQUFJLEVBQUUsT0FBTztLQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDTCx1QkFBbUIsR0FBRyxrQ0FBa0I7QUFDdEMsVUFBSSxFQUFFLGNBQWM7S0FDckIsRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUNOLENBQUMsQ0FBQTtBQUNGLFdBQVMsQ0FBQyxZQUFXO0FBQ25CLGlCQUFhLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDdkIsdUJBQW1CLENBQUMsT0FBTyxFQUFFLENBQUE7R0FDOUIsQ0FBQyxDQUFBOztBQUVGLElBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxZQUFXO0FBQy9DLFVBQU0sQ0FBQyxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDaEQsVUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDeEMsVUFBTSxDQUFDLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNqRCxVQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtHQUM1QyxDQUFDLENBQUE7QUFDRixVQUFRLENBQUMsbURBQW1ELEVBQUUsWUFBVztBQUN2RSxNQUFFLENBQUMsbUJBQW1CLEVBQUUsWUFBVztBQUNqQyxV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QUEiLCJmaWxlIjoiL1VzZXJzL2FoLy5hdG9tL3BhY2thZ2VzL2xpbnRlci9zcGVjL2luZGllLWRlbGVnYXRlLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgSW5kaWVEZWxlZ2F0ZSBmcm9tICcuLi9saWIvaW5kaWUtZGVsZWdhdGUnXG5pbXBvcnQgeyBnZXRNZXNzYWdlLCBnZXRNZXNzYWdlTGVnYWN5IH0gZnJvbSAnLi9jb21tb24nXG5cbmRlc2NyaWJlKCdJbmRpZURlbGVnYXRlJywgZnVuY3Rpb24oKSB7XG4gIGxldCBpbmRpZURlbGVnYXRlXG4gIGxldCBpbmRpZURlbGVnYXRlTGVnYWN5XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBpbmRpZURlbGVnYXRlID0gbmV3IEluZGllRGVsZWdhdGUoe1xuICAgICAgbmFtZTogJ0luZGllJyxcbiAgICB9LCAyKVxuICAgIGluZGllRGVsZWdhdGVMZWdhY3kgPSBuZXcgSW5kaWVEZWxlZ2F0ZSh7XG4gICAgICBuYW1lOiAnSW5kaWUgTGVnYWN5JyxcbiAgICB9LCAxKVxuICB9KVxuICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW5kaWVEZWxlZ2F0ZS5kaXNwb3NlKClcbiAgICBpbmRpZURlbGVnYXRlTGVnYWN5LmRpc3Bvc2UoKVxuICB9KVxuXG4gIGl0KCdoYXMgdGhlIGJhc2ljIGxpbnRlciBwcm9wZXJ0aWVzJywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KHR5cGVvZiBpbmRpZURlbGVnYXRlLm5hbWUpLnRvQmUoJ3N0cmluZycpXG4gICAgZXhwZWN0KGluZGllRGVsZWdhdGUubmFtZSkudG9CZSgnSW5kaWUnKVxuICAgIGV4cGVjdCh0eXBlb2YgaW5kaWVEZWxlZ2F0ZS5zY29wZSkudG9CZSgnc3RyaW5nJylcbiAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5zY29wZSkudG9CZSgncHJvamVjdCcpXG4gIH0pXG4gIGRlc2NyaWJlKCc6OnNldE1lc3NhZ2VzICYmIDo6Z2V0TWVzc2FnZXMgJiYgOjpjbGVhck1lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3dvcmtzIGFzIGV4cGVjdGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gZ2V0TWVzc2FnZShmYWxzZSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLmdldE1lc3NhZ2VzKCkpLnRvRXF1YWwoW10pXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKG1lc3NhZ2UubG9jYXRpb24uZmlsZSwgW21lc3NhZ2VdKVxuICAgICAgZXhwZWN0KGluZGllRGVsZWdhdGUuZ2V0TWVzc2FnZXMoKSkudG9FcXVhbChbbWVzc2FnZV0pXG4gICAgICBpbmRpZURlbGVnYXRlLmNsZWFyTWVzc2FnZXMoKVxuICAgICAgZXhwZWN0KGluZGllRGVsZWdhdGUuZ2V0TWVzc2FnZXMoKSkudG9FcXVhbChbXSlcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnOjpzZXRNZXNzYWdlcycsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCdvdmVyd3JpdGVzIHByZXZpb3VzIG1lc3NhZ2VzIGZvciB0aGF0IGZpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VBID0gZ2V0TWVzc2FnZShmYWxzZSlcbiAgICAgIGNvbnN0IG1lc3NhZ2VCID0gZ2V0TWVzc2FnZShmYWxzZSlcbiAgICAgIGNvbnN0IG1lc3NhZ2VDID0gZ2V0TWVzc2FnZShmYWxzZSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLmdldE1lc3NhZ2VzKCkpLnRvRXF1YWwoW10pXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKG1lc3NhZ2VBLmxvY2F0aW9uLmZpbGUsIFttZXNzYWdlQSwgbWVzc2FnZUJdKVxuICAgICAgZXhwZWN0KGluZGllRGVsZWdhdGUuZ2V0TWVzc2FnZXMoKSkudG9FcXVhbChbbWVzc2FnZUEsIG1lc3NhZ2VCXSlcbiAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMobWVzc2FnZUEubG9jYXRpb24uZmlsZSwgW21lc3NhZ2VBLCBtZXNzYWdlQ10pXG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5nZXRNZXNzYWdlcygpKS50b0VxdWFsKFttZXNzYWdlQSwgbWVzc2FnZUNdKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRNZXNzYWdlcyhtZXNzYWdlQS5sb2NhdGlvbi5maWxlLCBbbWVzc2FnZUIsIG1lc3NhZ2VDXSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLmdldE1lc3NhZ2VzKCkpLnRvRXF1YWwoW21lc3NhZ2VCLCBtZXNzYWdlQ10pXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKG1lc3NhZ2VBLmxvY2F0aW9uLmZpbGUsIFttZXNzYWdlQ10pXG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5nZXRNZXNzYWdlcygpKS50b0VxdWFsKFttZXNzYWdlQ10pXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKG1lc3NhZ2VBLmxvY2F0aW9uLmZpbGUsIFtdKVxuICAgICAgZXhwZWN0KGluZGllRGVsZWdhdGUuZ2V0TWVzc2FnZXMoKSkudG9FcXVhbChbXSlcbiAgICB9KVxuICAgIGl0KCdkb2VzIG5vdCB1cGRhdGUgaWYgaXMgZGlzcG9zZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0aW1lc1VwZGF0ZWQgPSAwXG4gICAgICBpbmRpZURlbGVnYXRlLm9uRGlkVXBkYXRlKGZ1bmN0aW9uKCkge1xuICAgICAgICB0aW1lc1VwZGF0ZWQrK1xuICAgICAgfSlcbiAgICAgIGV4cGVjdCh0aW1lc1VwZGF0ZWQpLnRvQmUoMClcbiAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMoX19maWxlbmFtZSwgW2dldE1lc3NhZ2UoX19maWxlbmFtZSldKVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgxKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5kaXNwb3NlKClcbiAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMoX19maWxlbmFtZSwgW2dldE1lc3NhZ2UoX19maWxlbmFtZSldKVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgxKVxuICAgIH0pXG4gICAgaXQoJ2RvZXMgdXBkYXRlIGlmIG5vdCBkaXNwb3NlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRpbWVzVXBkYXRlZCA9IDBcbiAgICAgIGluZGllRGVsZWdhdGUub25EaWRVcGRhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVzVXBkYXRlZCsrXG4gICAgICB9KVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgwKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRNZXNzYWdlcyhfX2ZpbGVuYW1lLCBbZ2V0TWVzc2FnZShfX2ZpbGVuYW1lKV0pXG4gICAgICBleHBlY3QodGltZXNVcGRhdGVkKS50b0JlKDEpXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKF9fZmlsZW5hbWUsIFtnZXRNZXNzYWdlKF9fZmlsZW5hbWUpXSlcbiAgICAgIGV4cGVjdCh0aW1lc1VwZGF0ZWQpLnRvQmUoMilcbiAgICB9KVxuICAgIGl0KCdjcmllcyBpZiBtZXNzYWdlIGhhcyBhIGRpZmZlcmVudCBmaWxlUGF0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKF9fZmlsZW5hbWUsIFtnZXRNZXNzYWdlKF9fZmlsZW5hbWUpXSlcbiAgICAgIH0pLm5vdC50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRNZXNzYWdlcyhfX2ZpbGVuYW1lLCBbZ2V0TWVzc2FnZShfX2ZpbGVuYW1lKSwgZ2V0TWVzc2FnZShfX2ZpbGVuYW1lKSwgZ2V0TWVzc2FnZShfX2ZpbGVuYW1lKV0pXG4gICAgICB9KS5ub3QudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMoX19maWxlbmFtZSwgW2dldE1lc3NhZ2UoZmFsc2UpXSlcbiAgICAgIH0pLnRvVGhyb3coJ21lc3NhZ2UubG9jYXRpb24uZmlsZSBkb2VzIG5vdCBtYXRjaCB0aGUgZ2l2ZW4gZmlsZVBhdGgnKVxuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKF9fZmlsZW5hbWUsIFtnZXRNZXNzYWdlKF9fZmlsZW5hbWUpLCBnZXRNZXNzYWdlKGZhbHNlKV0pXG4gICAgICB9KS50b1Rocm93KCdtZXNzYWdlLmxvY2F0aW9uLmZpbGUgZG9lcyBub3QgbWF0Y2ggdGhlIGdpdmVuIGZpbGVQYXRoJylcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRNZXNzYWdlcyhfX2ZpbGVuYW1lLCBbZ2V0TWVzc2FnZShfX2ZpbGVuYW1lKSwgZ2V0TWVzc2FnZShmYWxzZSksIGdldE1lc3NhZ2UoX19maWxlbmFtZSldKVxuICAgICAgfSkudG9UaHJvdygnbWVzc2FnZS5sb2NhdGlvbi5maWxlIGRvZXMgbm90IG1hdGNoIHRoZSBnaXZlbiBmaWxlUGF0aCcpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMoX19maWxlbmFtZSwgW2dldE1lc3NhZ2UoX19maWxlbmFtZSksIGdldE1lc3NhZ2UoX19maWxlbmFtZSksIGdldE1lc3NhZ2UoZmFsc2UpXSlcbiAgICAgIH0pLnRvVGhyb3coJ21lc3NhZ2UubG9jYXRpb24uZmlsZSBkb2VzIG5vdCBtYXRjaCB0aGUgZ2l2ZW4gZmlsZVBhdGgnKVxuICAgIH0pXG4gICAgaXQoJ2RvZXMgbm90IGFkZCBpbnZhbGlkIG1lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgwKVxuICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKCkubGVuZ3RoKS50b0JlKDApXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKF9fZmlsZW5hbWUsIFt7fV0pXG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgwKVxuICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKCkubGVuZ3RoKS50b0JlKDEpXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKF9fZmlsZW5hbWUsIFtnZXRNZXNzYWdlKF9fZmlsZW5hbWUpXSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLmdldE1lc3NhZ2VzKCkubGVuZ3RoKS50b0JlKDEpXG4gICAgICBleHBlY3QoYXRvbS5ub3RpZmljYXRpb25zLmdldE5vdGlmaWNhdGlvbnMoKS5sZW5ndGgpLnRvQmUoMSlcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnOjpjbGVhck1lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ2RvZXMgbm90IHVwZGF0ZSBpZiBkaXNwb3NlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRpbWVzVXBkYXRlZCA9IDBcbiAgICAgIGluZGllRGVsZWdhdGUub25EaWRVcGRhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVzVXBkYXRlZCsrXG4gICAgICB9KVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgwKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRNZXNzYWdlcyhfX2ZpbGVuYW1lLCBbZ2V0TWVzc2FnZShfX2ZpbGVuYW1lKV0pXG4gICAgICBleHBlY3QodGltZXNVcGRhdGVkKS50b0JlKDEpXG4gICAgICBpbmRpZURlbGVnYXRlLmRpc3Bvc2UoKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5jbGVhck1lc3NhZ2VzKClcbiAgICAgIGV4cGVjdCh0aW1lc1VwZGF0ZWQpLnRvQmUoMSlcbiAgICB9KVxuICAgIGl0KCdkb2VzIHVwZGF0ZSBpZiBub3QgZGlzcG9zZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0aW1lc1VwZGF0ZWQgPSAwXG4gICAgICBpbmRpZURlbGVnYXRlLm9uRGlkVXBkYXRlKGZ1bmN0aW9uKCkge1xuICAgICAgICB0aW1lc1VwZGF0ZWQrK1xuICAgICAgfSlcbiAgICAgIGV4cGVjdCh0aW1lc1VwZGF0ZWQpLnRvQmUoMClcbiAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMoX19maWxlbmFtZSwgW2dldE1lc3NhZ2UoX19maWxlbmFtZSldKVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgxKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5jbGVhck1lc3NhZ2VzKClcbiAgICAgIGV4cGVjdCh0aW1lc1VwZGF0ZWQpLnRvQmUoMilcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnOjpzZXRBbGxNZXNzYWdlcycsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCdhdXRvbWF0aWNhbGx5IHNwbGl0cyBtZXNzYWdlcyBpbnRvIGZpbGVQYXRoIGdyb3VwcycsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgbWVzc2FnZUEgPSBnZXRNZXNzYWdlKGZhbHNlKVxuICAgICAgY29uc3QgbWVzc2FnZUIgPSBnZXRNZXNzYWdlKGZhbHNlKVxuICAgICAgY29uc3QgbWVzc2FnZUMgPSBnZXRNZXNzYWdlKGZhbHNlKVxuICAgICAgY29uc3QgbWVzc2FnZUQgPSBnZXRNZXNzYWdlKGZhbHNlKVxuXG4gICAgICBtZXNzYWdlQy5sb2NhdGlvbi5maWxlID0gX19maWxlbmFtZVxuICAgICAgbWVzc2FnZUQubG9jYXRpb24uZmlsZSA9IF9fZmlsZW5hbWVcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLm1lc3NhZ2VzLnNpemUpLnRvQmUoMClcbiAgICAgIGluZGllRGVsZWdhdGUuc2V0QWxsTWVzc2FnZXMoW21lc3NhZ2VBLCBtZXNzYWdlQiwgbWVzc2FnZUMsIG1lc3NhZ2VEXSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLm1lc3NhZ2VzLnNpemUpLnRvQmUoMilcblxuICAgICAgY29uc3QgbWVzc2FnZXNBID0gaW5kaWVEZWxlZ2F0ZS5tZXNzYWdlcy5nZXQobWVzc2FnZUEubG9jYXRpb24uZmlsZSlcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG1lc3NhZ2VzQSkpLnRvQmUodHJ1ZSlcbiAgICAgIGV4cGVjdChtZXNzYWdlc0EpLnRvRXF1YWwoW21lc3NhZ2VBLCBtZXNzYWdlQl0pXG5cbiAgICAgIGNvbnN0IG1lc3NhZ2VzQiA9IGluZGllRGVsZWdhdGUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VDLmxvY2F0aW9uLmZpbGUpXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShtZXNzYWdlc0IpKS50b0JlKHRydWUpXG4gICAgICBleHBlY3QobWVzc2FnZXNCKS50b0VxdWFsKFttZXNzYWdlQywgbWVzc2FnZURdKVxuICAgIH0pXG4gICAgaXQoJ2RvZXMgbm90IHVwZGF0ZSBpZiBkaXNwb3NlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRpbWVzVXBkYXRlZCA9IDBcbiAgICAgIGluZGllRGVsZWdhdGUub25EaWRVcGRhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRpbWVzVXBkYXRlZCsrXG4gICAgICB9KVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgwKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRBbGxNZXNzYWdlcyhbZ2V0TWVzc2FnZShmYWxzZSldKVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgxKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5kaXNwb3NlKClcbiAgICAgIGluZGllRGVsZWdhdGUuc2V0QWxsTWVzc2FnZXMoW10pXG4gICAgICBleHBlY3QodGltZXNVcGRhdGVkKS50b0JlKDEpXG4gICAgfSlcbiAgICBpdCgnZG9lcyB1cGRhdGUgaWYgbm90IGRpc3Bvc2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGltZXNVcGRhdGVkID0gMFxuICAgICAgaW5kaWVEZWxlZ2F0ZS5vbkRpZFVwZGF0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgdGltZXNVcGRhdGVkKytcbiAgICAgIH0pXG4gICAgICBleHBlY3QodGltZXNVcGRhdGVkKS50b0JlKDApXG4gICAgICBpbmRpZURlbGVnYXRlLnNldEFsbE1lc3NhZ2VzKFtnZXRNZXNzYWdlKGZhbHNlKV0pXG4gICAgICBleHBlY3QodGltZXNVcGRhdGVkKS50b0JlKDEpXG4gICAgICBpbmRpZURlbGVnYXRlLnNldEFsbE1lc3NhZ2VzKFtdKVxuICAgICAgZXhwZWN0KHRpbWVzVXBkYXRlZCkudG9CZSgyKVxuICAgIH0pXG4gICAgaXQoJ2RvZXMgbm90IGFkZCBpbnZhbGlkIG1lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgwKVxuICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKCkubGVuZ3RoKS50b0JlKDApXG4gICAgICBpbmRpZURlbGVnYXRlLnNldEFsbE1lc3NhZ2VzKFt7fV0pXG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgwKVxuICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKCkubGVuZ3RoKS50b0JlKDEpXG4gICAgICBpbmRpZURlbGVnYXRlLnNldEFsbE1lc3NhZ2VzKFtnZXRNZXNzYWdlKF9fZmlsZW5hbWUpXSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLmdldE1lc3NhZ2VzKCkubGVuZ3RoKS50b0JlKDEpXG4gICAgICBleHBlY3QoYXRvbS5ub3RpZmljYXRpb25zLmdldE5vdGlmaWNhdGlvbnMoKS5sZW5ndGgpLnRvQmUoMSlcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnOjpkaXNwb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ2NsZWFycyBtZXNzYWdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRBbGxNZXNzYWdlcyhbZ2V0TWVzc2FnZShmYWxzZSldKVxuICAgICAgZXhwZWN0KGluZGllRGVsZWdhdGUubWVzc2FnZXMuc2l6ZSkudG9CZSgxKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5kaXNwb3NlKClcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlLm1lc3NhZ2VzLnNpemUpLnRvQmUoMClcbiAgICB9KVxuICAgIGl0KCdlbWl0cyBkaWQtZGVzdHJveSBldmVudCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGRpZERlc3Ryb3kgPSBmYWxzZVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5vbkRpZERlc3Ryb3koZnVuY3Rpb24oKSB7XG4gICAgICAgIGRpZERlc3Ryb3kgPSB0cnVlXG4gICAgICB9KVxuICAgICAgZXhwZWN0KGRpZERlc3Ryb3kpLnRvQmUoZmFsc2UpXG4gICAgICBpbmRpZURlbGVnYXRlLmRpc3Bvc2UoKVxuICAgICAgZXhwZWN0KGRpZERlc3Ryb3kpLnRvQmUodHJ1ZSlcbiAgICB9KVxuICB9KVxuICBkZXNjcmliZSgnTGVnYWN5IGZlYXR1cmVzJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ2hhcyBhIGRlbGV0ZU1lc3NhZ2VzKCkgaGFzIHRocm93cyBvbiBuZXdlciB2ZXJzaW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGluZGllRGVsZWdhdGUuZGVsZXRlTWVzc2FnZXMoKVxuICAgICAgfSkudG9UaHJvdygnQ2FsbCB0byBkZXByZWNpYXRlZCBtZXRob2QgZGVsZXRlTWVzc2FnZXMoKS4gVXNlIGNsZWFyTWVzc2FnZXMoKSBpbnNlYWQnKVxuICAgIH0pXG4gICAgaXQoJ2hhcyBhIHNldE1lc3NhZ2VzKCkgdGhhdCB0aHJvd3Mgd2hlbiBjYWxsZWQgd2l0aCBvbGQgc2lnbmF0dXJlJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGluZGllRGVsZWdhdGUuc2V0TWVzc2FnZXMoW10pXG4gICAgICB9KS50b1Rocm93KCdJbnZhbGlkIFBhcmFtZXRlcnMgdG8gc2V0TWVzc2FnZXMoKScpXG4gICAgfSlcbiAgICBpdCgnc2V0cyBhbmQgY2xlYXJzIG1lc3NhZ2VzIHByb3Blcmx5IG9uIGxlZ2FjeSB2ZXJzaW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICBpbmRpZURlbGVnYXRlTGVnYWN5LnNldE1lc3NhZ2VzKFtnZXRNZXNzYWdlTGVnYWN5KGZhbHNlKV0pXG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZUxlZ2FjeS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgxKVxuICAgICAgaW5kaWVEZWxlZ2F0ZUxlZ2FjeS5kZWxldGVNZXNzYWdlcygpXG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZUxlZ2FjeS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgwKVxuICAgIH0pXG4gICAgaXQoJ2RvZXMgbm90IGFkZCBpbnZhbGlkIG1lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoaW5kaWVEZWxlZ2F0ZUxlZ2FjeS5nZXRNZXNzYWdlcygpLmxlbmd0aCkudG9CZSgwKVxuICAgICAgZXhwZWN0KGF0b20ubm90aWZpY2F0aW9ucy5nZXROb3RpZmljYXRpb25zKCkubGVuZ3RoKS50b0JlKDApXG5cbiAgICAgIGluZGllRGVsZWdhdGVMZWdhY3kuc2V0TWVzc2FnZXMoW3t9XSlcbiAgICAgIGV4cGVjdChpbmRpZURlbGVnYXRlTGVnYWN5LmdldE1lc3NhZ2VzKCkubGVuZ3RoKS50b0JlKDApXG4gICAgICBleHBlY3QoYXRvbS5ub3RpZmljYXRpb25zLmdldE5vdGlmaWNhdGlvbnMoKS5sZW5ndGgpLnRvQmUoMSlcblxuICAgICAgaW5kaWVEZWxlZ2F0ZUxlZ2FjeS5zZXRNZXNzYWdlcyhbZ2V0TWVzc2FnZUxlZ2FjeShmYWxzZSldKVxuICAgICAgZXhwZWN0KGluZGllRGVsZWdhdGVMZWdhY3kuZ2V0TWVzc2FnZXMoKS5sZW5ndGgpLnRvQmUoMSlcbiAgICAgIGV4cGVjdChhdG9tLm5vdGlmaWNhdGlvbnMuZ2V0Tm90aWZpY2F0aW9ucygpLmxlbmd0aCkudG9CZSgxKVxuICAgIH0pXG4gIH0pXG4gIGRlc2NyaWJlKCc6Om9uRGlkVXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ2luY2x1ZGVzIGFsbCBvZiB0aGUgbWVzc2FnZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzQSA9IFtnZXRNZXNzYWdlKCdhJyksIGdldE1lc3NhZ2UoJ2EnKSwgZ2V0TWVzc2FnZSgnYScpLCBnZXRNZXNzYWdlKCdhJyksIGdldE1lc3NhZ2UoJ2EnKV1cbiAgICAgIGNvbnN0IG1lc3NhZ2VzQiA9IFtnZXRNZXNzYWdlKCdiJyksIGdldE1lc3NhZ2UoJ2InKSwgZ2V0TWVzc2FnZSgnYicpLCBnZXRNZXNzYWdlKCdiJyksIGdldE1lc3NhZ2UoJ2InKV1cbiAgICAgIGNvbnN0IHNweUNhbGxiYWNrID0gamFzbWluZS5jcmVhdGVTcHkoJ29uRGlkVXBkYXRlJylcbiAgICAgIGluZGllRGVsZWdhdGUub25EaWRVcGRhdGUoc3B5Q2FsbGJhY2spXG4gICAgICBpbmRpZURlbGVnYXRlLnNldE1lc3NhZ2VzKCdhJywgbWVzc2FnZXNBKVxuICAgICAgaW5kaWVEZWxlZ2F0ZS5zZXRNZXNzYWdlcygnYicsIG1lc3NhZ2VzQilcbiAgICAgIGluZGllRGVsZWdhdGUuY2xlYXJNZXNzYWdlcygpXG4gICAgICBleHBlY3Qoc3B5Q2FsbGJhY2suY2FsbHMubGVuZ3RoKS50b0JlKDMpXG4gICAgICBleHBlY3Qoc3B5Q2FsbGJhY2suY2FsbHNbMF0uYXJnc1swXSkudG9FcXVhbChtZXNzYWdlc0EpXG4gICAgICBleHBlY3Qoc3B5Q2FsbGJhY2suY2FsbHNbMV0uYXJnc1swXSkudG9FcXVhbChtZXNzYWdlc0EuY29uY2F0KG1lc3NhZ2VzQikpXG4gICAgICBleHBlY3Qoc3B5Q2FsbGJhY2suY2FsbHNbMl0uYXJnc1swXSkudG9FcXVhbChbXSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==