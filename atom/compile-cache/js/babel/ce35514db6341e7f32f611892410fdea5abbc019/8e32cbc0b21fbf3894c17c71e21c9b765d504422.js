function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _libProvidersHighlight = require('../lib/providers-highlight');

var _libProvidersHighlight2 = _interopRequireDefault(_libProvidersHighlight);

describe('ProvidersHighlight', function () {
  var providersHighlight = undefined;
  var editor = undefined;

  beforeEach(function () {
    if (providersHighlight) {
      providersHighlight.dispose();
    }
    providersHighlight = new _libProvidersHighlight2['default']();
    atom.workspace.destroyActivePane();
    waitsForPromise(function () {
      return atom.workspace.open(__filename).then(function () {
        editor = atom.workspace.getActiveTextEditor();
      });
    });
    atom.packages.activatePackage('language-javascript');
  });
  function addProvider(provider) {
    return providersHighlight.addProvider(provider);
  }
  function deleteProvider(provider) {
    providersHighlight.deleteProvider(provider);
  }

  describe('addProvider', function () {
    it('validates parameters properly', function () {
      expect(function () {
        addProvider();
      }).toThrow();
      expect(function () {
        addProvider(null);
      }).toThrow();
      expect(function () {
        addProvider(1);
      }).toThrow();
      expect(function () {
        addProvider(false);
      }).toThrow();
      expect(function () {
        addProvider(true);
      }).toThrow();

      expect(function () {
        addProvider({
          grammarScopes: false
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: null
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: true
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: 5
        });
      }).toThrow();

      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: false
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: null
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: true
        });
      }).toThrow();
      expect(function () {
        addProvider({
          grammarScopes: [],
          getIntentions: 20
        });
      }).toThrow();
      addProvider({
        grammarScopes: [],
        getIntentions: function getIntentions() {}
      });
    });
  });
  describe('hasProvider', function () {
    it('works properly', function () {
      var provider = {
        grammarScopes: [],
        getIntentions: function getIntentions() {
          throw new Error();
        }
      };
      expect(providersHighlight.hasProvider(provider)).toBe(false);
      providersHighlight.addProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(true);
    });
  });
  describe('deleteProvider', function () {
    it('works properly', function () {
      deleteProvider(true);
      deleteProvider(null);
      deleteProvider(false);
      deleteProvider(50);
      var provider = {
        grammarScopes: [],
        getIntentions: function getIntentions() {
          throw new Error();
        }
      };
      expect(providersHighlight.hasProvider(provider)).toBe(false);
      providersHighlight.addProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(true);
      providersHighlight.deleteProvider(provider);
      expect(providersHighlight.hasProvider(provider)).toBe(false);
    });
  });
  describe('trigger', function () {
    it('works properly', function () {
      var intention = {
        range: [[0, 1], [1, Infinity]],
        'class': 'something',
        created: function created() {}
      };
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [intention];
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function (results) {
          (0, _assert2['default'])(Array.isArray(results));
          expect(results[0]).toBe(intention);
        });
      });
    });
    it('ignores previous result from executed twice instantly', function () {
      var count = 0;
      var intentionFirst = {
        range: [[0, 1], [1, Infinity]],
        'class': 'something',
        created: function created() {}
      };
      var intentionSecond = {
        range: [[0, 1], [1, Infinity]],
        created: function created() {}
      };
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          if (++count === 1) {
            return [intentionFirst];
          }
          return [intentionSecond];
        }
      });
      var promiseFirst = providersHighlight.trigger(editor);
      var promiseSecond = providersHighlight.trigger(editor);

      waitsForPromise(function () {
        return promiseFirst.then(function (results) {
          expect(results).toEqual([]);
        });
      });
      waitsForPromise(function () {
        return promiseSecond.then(function (results) {
          (0, _assert2['default'])(Array.isArray(results));
          expect(results[0]).toBe(intentionSecond);
        });
      });
    });
    it('does not enable it if providers return no results, including non-array ones', function () {
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [];
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return null;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return false;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return 50;
        }
      });
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {}
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function (results) {
          expect(results).toEqual([]);
        });
      });
    });
    it('emits an error if provider throws an error', function () {
      providersHighlight.addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          throw new Error('test from provider');
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(false).toBe(true);
        }, function (e) {
          expect(e.message).toBe('test from provider');
        });
      });
    });
    it('validates suggestions properly', function () {
      addProvider({
        grammarScopes: ['*'],
        getIntentions: function getIntentions() {
          return [{}];
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(false).toBe(true);
        }, function (e) {
          expect(e instanceof Error).toBe(true);
        });
      });
    });
    it('triggers providers based on scope', function () {
      var coffeeCalled = false;
      var jsCalled = false;
      addProvider({
        grammarScopes: ['source.js'],
        getIntentions: function getIntentions() {
          jsCalled = true;
        }
      });
      addProvider({
        grammarScopes: ['source.coffee'],
        getIntentions: function getIntentions() {
          coffeeCalled = true;
        }
      });
      waitsForPromise(function () {
        return providersHighlight.trigger(editor).then(function () {
          expect(jsCalled).toBe(true);
          expect(coffeeCalled).toBe(false);
        });
      });
    });
  });

  it('automatically updates length of decoration everytime coordinates update', function () {
    var element = undefined;
    var jsCalled = false;
    var range = [[2, 0], [2, 5]];
    addProvider({
      grammarScopes: ['source.js'],
      getIntentions: function getIntentions() {
        jsCalled = true;
        return [{
          range: range,
          created: function created(_ref) {
            var _element = _ref.element;

            element = _element;
          }
        }];
      }
    });
    waitsForPromise(function () {
      return providersHighlight.trigger(editor).then(function (intentions) {
        (0, _assert2['default'])(Array.isArray(intentions));
        expect(jsCalled).toBe(true);
        expect(element).not.toBeDefined();
        providersHighlight.paint(editor, intentions);
        expect(element).toBeDefined();
        expect(element.textContent.length).toBe(5);
        editor.setTextInBufferRange(range, 'something');
        expect(element.textContent.length).toBe(9);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9pbnRlbnRpb25zL3NwZWMvcHJvdmlkZXJzLWhpZ2hsaWdodC1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O3NCQUVzQixRQUFROzs7O3FDQUNDLDRCQUE0Qjs7OztBQUUzRCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsWUFBVztBQUN4QyxNQUFJLGtCQUFrQixZQUFBLENBQUE7QUFDdEIsTUFBSSxNQUFNLFlBQUEsQ0FBQTs7QUFFVixZQUFVLENBQUMsWUFBVztBQUNwQixRQUFJLGtCQUFrQixFQUFFO0FBQ3RCLHdCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQzdCO0FBQ0Qsc0JBQWtCLEdBQUcsd0NBQXdCLENBQUE7QUFDN0MsUUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0FBQ2xDLG1CQUFlLENBQUMsWUFBVztBQUN6QixhQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFXO0FBQ3JELGNBQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUE7T0FDOUMsQ0FBQyxDQUFBO0tBQ0gsQ0FBQyxDQUFBO0FBQ0YsUUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsQ0FBQTtHQUNyRCxDQUFDLENBQUE7QUFDRixXQUFTLFdBQVcsQ0FBQyxRQUFhLEVBQUU7QUFDbEMsV0FBTyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7R0FDaEQ7QUFDRCxXQUFTLGNBQWMsQ0FBQyxRQUFhLEVBQUU7QUFDckMsc0JBQWtCLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0dBQzVDOztBQUVELFVBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBVztBQUNqQyxNQUFFLENBQUMsK0JBQStCLEVBQUUsWUFBVztBQUM3QyxZQUFNLENBQUMsWUFBVztBQUNoQixtQkFBVyxF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QUFDN0IsY0FBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzFDLGNBQU0sQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUE7QUFDL0MsY0FBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO09BQzNDLENBQUMsQ0FBQTtLQUNILENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtDQUNILENBQUMsQ0FBQSIsImZpbGUiOiIvVXNlcnMvYWgvLmF0b20vcGFja2FnZXMvaW50ZW50aW9ucy9zcGVjL3Byb3ZpZGVycy1oaWdobGlnaHQtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0J1xuaW1wb3J0IFByb3ZpZGVyc0hpZ2hsaWdodCBmcm9tICcuLi9saWIvcHJvdmlkZXJzLWhpZ2hsaWdodCdcblxuZGVzY3JpYmUoJ1Byb3ZpZGVyc0hpZ2hsaWdodCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgcHJvdmlkZXJzSGlnaGxpZ2h0XG4gIGxldCBlZGl0b3JcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGlmIChwcm92aWRlcnNIaWdobGlnaHQpIHtcbiAgICAgIHByb3ZpZGVyc0hpZ2hsaWdodC5kaXNwb3NlKClcbiAgICB9XG4gICAgcHJvdmlkZXJzSGlnaGxpZ2h0ID0gbmV3IFByb3ZpZGVyc0hpZ2hsaWdodCgpXG4gICAgYXRvbS53b3Jrc3BhY2UuZGVzdHJveUFjdGl2ZVBhbmUoKVxuICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKF9fZmlsZW5hbWUpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKVxuICAgICAgfSlcbiAgICB9KVxuICAgIGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKCdsYW5ndWFnZS1qYXZhc2NyaXB0JylcbiAgfSlcbiAgZnVuY3Rpb24gYWRkUHJvdmlkZXIocHJvdmlkZXI6IGFueSkge1xuICAgIHJldHVybiBwcm92aWRlcnNIaWdobGlnaHQuYWRkUHJvdmlkZXIocHJvdmlkZXIpXG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlUHJvdmlkZXIocHJvdmlkZXI6IGFueSkge1xuICAgIHByb3ZpZGVyc0hpZ2hsaWdodC5kZWxldGVQcm92aWRlcihwcm92aWRlcilcbiAgfVxuXG4gIGRlc2NyaWJlKCdhZGRQcm92aWRlcicsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCd2YWxpZGF0ZXMgcGFyYW1ldGVycyBwcm9wZXJseScsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBhZGRQcm92aWRlcigpXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIobnVsbClcbiAgICAgIH0pLnRvVGhyb3coKVxuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBhZGRQcm92aWRlcigxKVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKGZhbHNlKVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBleHBlY3QoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZFByb3ZpZGVyKHRydWUpXG4gICAgICB9KS50b1Rocm93KClcblxuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgICAgZ3JhbW1hclNjb3BlczogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IG51bGwsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IDUsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcblxuICAgICAgZXhwZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgICAgZ3JhbW1hclNjb3BlczogW10sXG4gICAgICAgICAgZ2V0SW50ZW50aW9uczogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICAgIGdldEludGVudGlvbnM6IG51bGwsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICAgIGdldEludGVudGlvbnM6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICB9KS50b1Rocm93KClcbiAgICAgIGV4cGVjdChmdW5jdGlvbigpIHtcbiAgICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICAgIGdldEludGVudGlvbnM6IDIwLFxuICAgICAgICB9KVxuICAgICAgfSkudG9UaHJvdygpXG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge30sXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG4gIGRlc2NyaWJlKCdoYXNQcm92aWRlcicsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCd3b3JrcyBwcm9wZXJseScsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSB7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFtdLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgICBleHBlY3QocHJvdmlkZXJzSGlnaGxpZ2h0Lmhhc1Byb3ZpZGVyKHByb3ZpZGVyKSkudG9CZShmYWxzZSlcbiAgICAgIHByb3ZpZGVyc0hpZ2hsaWdodC5hZGRQcm92aWRlcihwcm92aWRlcilcbiAgICAgIGV4cGVjdChwcm92aWRlcnNIaWdobGlnaHQuaGFzUHJvdmlkZXIocHJvdmlkZXIpKS50b0JlKHRydWUpXG4gICAgfSlcbiAgfSlcbiAgZGVzY3JpYmUoJ2RlbGV0ZVByb3ZpZGVyJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3dvcmtzIHByb3Blcmx5JywgZnVuY3Rpb24oKSB7XG4gICAgICBkZWxldGVQcm92aWRlcih0cnVlKVxuICAgICAgZGVsZXRlUHJvdmlkZXIobnVsbClcbiAgICAgIGRlbGV0ZVByb3ZpZGVyKGZhbHNlKVxuICAgICAgZGVsZXRlUHJvdmlkZXIoNTApXG4gICAgICBjb25zdCBwcm92aWRlciA9IHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogW10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKClcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICAgIGV4cGVjdChwcm92aWRlcnNIaWdobGlnaHQuaGFzUHJvdmlkZXIocHJvdmlkZXIpKS50b0JlKGZhbHNlKVxuICAgICAgcHJvdmlkZXJzSGlnaGxpZ2h0LmFkZFByb3ZpZGVyKHByb3ZpZGVyKVxuICAgICAgZXhwZWN0KHByb3ZpZGVyc0hpZ2hsaWdodC5oYXNQcm92aWRlcihwcm92aWRlcikpLnRvQmUodHJ1ZSlcbiAgICAgIHByb3ZpZGVyc0hpZ2hsaWdodC5kZWxldGVQcm92aWRlcihwcm92aWRlcilcbiAgICAgIGV4cGVjdChwcm92aWRlcnNIaWdobGlnaHQuaGFzUHJvdmlkZXIocHJvdmlkZXIpKS50b0JlKGZhbHNlKVxuICAgIH0pXG4gIH0pXG4gIGRlc2NyaWJlKCd0cmlnZ2VyJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3dvcmtzIHByb3Blcmx5JywgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBpbnRlbnRpb24gPSB7XG4gICAgICAgIHJhbmdlOiBbWzAsIDFdLCBbMSwgSW5maW5pdHldXSxcbiAgICAgICAgY2xhc3M6ICdzb21ldGhpbmcnLFxuICAgICAgICBjcmVhdGVkKCkge30sXG4gICAgICB9XG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnKiddLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBbaW50ZW50aW9uXVxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcikudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgICAgaW52YXJpYW50KEFycmF5LmlzQXJyYXkocmVzdWx0cykpXG4gICAgICAgICAgZXhwZWN0KHJlc3VsdHNbMF0pLnRvQmUoaW50ZW50aW9uKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIGl0KCdpZ25vcmVzIHByZXZpb3VzIHJlc3VsdCBmcm9tIGV4ZWN1dGVkIHR3aWNlIGluc3RhbnRseScsIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGNvdW50ID0gMFxuICAgICAgY29uc3QgaW50ZW50aW9uRmlyc3QgPSB7XG4gICAgICAgIHJhbmdlOiBbWzAsIDFdLCBbMSwgSW5maW5pdHldXSxcbiAgICAgICAgY2xhc3M6ICdzb21ldGhpbmcnLFxuICAgICAgICBjcmVhdGVkKCkge30sXG4gICAgICB9XG4gICAgICBjb25zdCBpbnRlbnRpb25TZWNvbmQgPSB7XG4gICAgICAgIHJhbmdlOiBbWzAsIDFdLCBbMSwgSW5maW5pdHldXSxcbiAgICAgICAgY3JlYXRlZCgpIHt9LFxuICAgICAgfVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtpbnRlbnRpb25GaXJzdF1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtpbnRlbnRpb25TZWNvbmRdXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgY29uc3QgcHJvbWlzZUZpcnN0ID0gcHJvdmlkZXJzSGlnaGxpZ2h0LnRyaWdnZXIoZWRpdG9yKVxuICAgICAgY29uc3QgcHJvbWlzZVNlY29uZCA9IHByb3ZpZGVyc0hpZ2hsaWdodC50cmlnZ2VyKGVkaXRvcilcblxuICAgICAgd2FpdHNGb3JQcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZUZpcnN0LnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xuICAgICAgICAgIGV4cGVjdChyZXN1bHRzKS50b0VxdWFsKFtdKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIHdhaXRzRm9yUHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VTZWNvbmQudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgICAgaW52YXJpYW50KEFycmF5LmlzQXJyYXkocmVzdWx0cykpXG4gICAgICAgICAgZXhwZWN0KHJlc3VsdHNbMF0pLnRvQmUoaW50ZW50aW9uU2Vjb25kKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIGl0KCdkb2VzIG5vdCBlbmFibGUgaXQgaWYgcHJvdmlkZXJzIHJldHVybiBubyByZXN1bHRzLCBpbmNsdWRpbmcgbm9uLWFycmF5IG9uZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWycqJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWycqJ10sXG4gICAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gNTBcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnKiddLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgd2FpdHNGb3JQcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJzSGlnaGxpZ2h0LnRyaWdnZXIoZWRpdG9yKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgICBleHBlY3QocmVzdWx0cykudG9FcXVhbChbXSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICBpdCgnZW1pdHMgYW4gZXJyb3IgaWYgcHJvdmlkZXIgdGhyb3dzIGFuIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICBwcm92aWRlcnNIaWdobGlnaHQuYWRkUHJvdmlkZXIoe1xuICAgICAgICBncmFtbWFyU2NvcGVzOiBbJyonXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Rlc3QgZnJvbSBwcm92aWRlcicpXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgd2FpdHNGb3JQcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJzSGlnaGxpZ2h0LnRyaWdnZXIoZWRpdG9yKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYWxzZSkudG9CZSh0cnVlKVxuICAgICAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZXhwZWN0KGUubWVzc2FnZSkudG9CZSgndGVzdCBmcm9tIHByb3ZpZGVyJylcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICBpdCgndmFsaWRhdGVzIHN1Z2dlc3Rpb25zIHByb3Blcmx5JywgZnVuY3Rpb24oKSB7XG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnKiddLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBbe31dXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgd2FpdHNGb3JQcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJzSGlnaGxpZ2h0LnRyaWdnZXIoZWRpdG9yKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYWxzZSkudG9CZSh0cnVlKVxuICAgICAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZXhwZWN0KGUgaW5zdGFuY2VvZiBFcnJvcikudG9CZSh0cnVlKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIGl0KCd0cmlnZ2VycyBwcm92aWRlcnMgYmFzZWQgb24gc2NvcGUnLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjb2ZmZWVDYWxsZWQgPSBmYWxzZVxuICAgICAgbGV0IGpzQ2FsbGVkID0gZmFsc2VcbiAgICAgIGFkZFByb3ZpZGVyKHtcbiAgICAgICAgZ3JhbW1hclNjb3BlczogWydzb3VyY2UuanMnXSxcbiAgICAgICAgZ2V0SW50ZW50aW9ucygpIHtcbiAgICAgICAgICBqc0NhbGxlZCA9IHRydWVcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICBhZGRQcm92aWRlcih7XG4gICAgICAgIGdyYW1tYXJTY29wZXM6IFsnc291cmNlLmNvZmZlZSddLFxuICAgICAgICBnZXRJbnRlbnRpb25zKCkge1xuICAgICAgICAgIGNvZmZlZUNhbGxlZCA9IHRydWVcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICB3YWl0c0ZvclByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlcnNIaWdobGlnaHQudHJpZ2dlcihlZGl0b3IpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGpzQ2FsbGVkKS50b0JlKHRydWUpXG4gICAgICAgICAgZXhwZWN0KGNvZmZlZUNhbGxlZCkudG9CZShmYWxzZSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBpdCgnYXV0b21hdGljYWxseSB1cGRhdGVzIGxlbmd0aCBvZiBkZWNvcmF0aW9uIGV2ZXJ5dGltZSBjb29yZGluYXRlcyB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICBsZXQgZWxlbWVudFxuICAgIGxldCBqc0NhbGxlZCA9IGZhbHNlXG4gICAgY29uc3QgcmFuZ2UgPSBbWzIsIDBdLCBbMiwgNV1dXG4gICAgYWRkUHJvdmlkZXIoe1xuICAgICAgZ3JhbW1hclNjb3BlczogWydzb3VyY2UuanMnXSxcbiAgICAgIGdldEludGVudGlvbnMoKSB7XG4gICAgICAgIGpzQ2FsbGVkID0gdHJ1ZVxuICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICByYW5nZSxcbiAgICAgICAgICBjcmVhdGVkKHsgZWxlbWVudDogX2VsZW1lbnQgfSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IF9lbGVtZW50XG4gICAgICAgICAgfSxcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgfSlcbiAgICB3YWl0c0ZvclByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXJzSGlnaGxpZ2h0LnRyaWdnZXIoZWRpdG9yKS50aGVuKGZ1bmN0aW9uKGludGVudGlvbnMpIHtcbiAgICAgICAgaW52YXJpYW50KEFycmF5LmlzQXJyYXkoaW50ZW50aW9ucykpXG4gICAgICAgIGV4cGVjdChqc0NhbGxlZCkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3QoZWxlbWVudCkubm90LnRvQmVEZWZpbmVkKClcbiAgICAgICAgcHJvdmlkZXJzSGlnaGxpZ2h0LnBhaW50KGVkaXRvciwgaW50ZW50aW9ucylcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQpLnRvQmVEZWZpbmVkKClcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQudGV4dENvbnRlbnQubGVuZ3RoKS50b0JlKDUpXG4gICAgICAgIGVkaXRvci5zZXRUZXh0SW5CdWZmZXJSYW5nZShyYW5nZSwgJ3NvbWV0aGluZycpXG4gICAgICAgIGV4cGVjdChlbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCkudG9CZSg5KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==