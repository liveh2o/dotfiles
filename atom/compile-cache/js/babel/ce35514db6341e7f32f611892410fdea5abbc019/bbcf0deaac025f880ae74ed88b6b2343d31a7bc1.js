Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getBufferPositionFromMouseEvent = getBufferPositionFromMouseEvent;
exports.mouseEventNearPosition = mouseEventNearPosition;
exports.hasParent = hasParent;

function getBufferPositionFromMouseEvent(event, editor, editorElement) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var screenPosition = editorElement.component.screenPositionForPixelPosition(pixelPosition);
  if (Number.isNaN(screenPosition.row) || Number.isNaN(screenPosition.column)) return null;
  // ^ Workaround for NaN bug steelbrain/linter-ui-default#191
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  // Only allow offset of 20px - Fixes steelbrain/linter-ui-default#63
  if ((differenceTop === 0 || differenceTop > 0 && differenceTop < 20 || differenceTop < 0 && differenceTop > -20) && (differenceLeft === 0 || differenceLeft > 0 && differenceLeft < 20 || differenceLeft < 0 && differenceLeft > -20)) {
    return editor.bufferPositionForScreenPosition(screenPosition);
  }
  return null;
}

function mouseEventNearPosition(event, editorElement, screenPosition, elementWidth, elementHeight) {
  var pixelPosition = editorElement.component.pixelPositionForMouseEvent(event);
  var expectedPixelPosition = editorElement.pixelPositionForScreenPosition(screenPosition);
  var differenceTop = pixelPosition.top - expectedPixelPosition.top;
  var differenceLeft = pixelPosition.left - expectedPixelPosition.left;
  if (differenceTop === 0 && differenceLeft === 0) {
    return true;
  }
  if (differenceTop > 0 && differenceTop > elementHeight + 20 || differenceTop < 0 && differenceTop < -5) {
    return false;
  }
  if (differenceLeft > 15 && differenceTop < 17) {
    return false;
  }
  return differenceLeft > 0 && differenceLeft < elementWidth + 20 || differenceLeft < 0 && differenceLeft > -5;
}

function hasParent(element, selector) {
  do {
    if (element.matches(selector)) {
      return true;
    }
    // $FlowIgnore: It's parent is an HTMLElement, not a NODE!
    element = element.parentNode;
  } while (element && element.nodeName !== 'HTML');
  return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9saW50ZXItdWktZGVmYXVsdC9saWIvZWRpdG9yL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlPLFNBQVMsK0JBQStCLENBQUMsS0FBaUIsRUFBRSxNQUFrQixFQUFFLGFBQXFCLEVBQVU7QUFDcEgsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMvRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQzVGLE1BQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUE7O0FBRXhGLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxDQUFDLDhCQUE4QixDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQzFGLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFBO0FBQ25FLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFBOztBQUV0RSxNQUNFLENBQUMsYUFBYSxLQUFLLENBQUMsSUFBSyxhQUFhLEdBQUcsQ0FBQyxJQUFJLGFBQWEsR0FBRyxFQUFFLEFBQUMsSUFBSyxhQUFhLEdBQUcsQ0FBQyxJQUFJLGFBQWEsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUM5RyxjQUFjLEtBQUssQ0FBQyxJQUFLLGNBQWMsR0FBRyxDQUFDLElBQUksY0FBYyxHQUFHLEVBQUUsQUFBQyxJQUFLLGNBQWMsR0FBRyxDQUFDLElBQUksY0FBYyxHQUFHLENBQUMsRUFBRSxDQUFDLEFBQUMsRUFDckg7QUFDQSxXQUFPLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxjQUFjLENBQUMsQ0FBQTtHQUM5RDtBQUNELFNBQU8sSUFBSSxDQUFBO0NBQ1o7O0FBRU0sU0FBUyxzQkFBc0IsQ0FBQyxLQUFpQixFQUFFLGFBQXFCLEVBQUUsY0FBcUIsRUFBRSxZQUFvQixFQUFFLGFBQXFCLEVBQVc7QUFDNUosTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMvRSxNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUMxRixNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQTtBQUNuRSxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQTtBQUN0RSxNQUFJLGFBQWEsS0FBSyxDQUFDLElBQUksY0FBYyxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQTtHQUNaO0FBQ0QsTUFBSSxBQUFDLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxHQUFJLGFBQWEsR0FBRyxFQUFFLEFBQUMsSUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsQUFBQyxFQUFFO0FBQzVHLFdBQU8sS0FBSyxDQUFBO0dBQ2I7QUFDRCxNQUFJLGNBQWMsR0FBRyxFQUFFLElBQUksYUFBYSxHQUFHLEVBQUUsRUFBRTtBQUM3QyxXQUFPLEtBQUssQ0FBQTtHQUNiO0FBQ0QsU0FBTyxBQUFDLGNBQWMsR0FBRyxDQUFDLElBQUksY0FBYyxHQUFJLFlBQVksR0FBRyxFQUFFLEFBQUMsSUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUMsQUFBQyxDQUFBO0NBQ25IOztBQUVNLFNBQVMsU0FBUyxDQUFDLE9BQW9CLEVBQUUsUUFBZ0IsRUFBVztBQUN6RSxLQUFHO0FBQ0QsUUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzdCLGFBQU8sSUFBSSxDQUFBO0tBQ1o7O0FBRUQsV0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUE7R0FDN0IsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUM7QUFDaEQsU0FBTyxLQUFLLENBQUE7Q0FDYiIsImZpbGUiOiIvVXNlcnMvYWgvLmF0b20vcGFja2FnZXMvbGludGVyLXVpLWRlZmF1bHQvbGliL2VkaXRvci9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHR5cGUgeyBQb2ludCwgVGV4dEVkaXRvciB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWZmZXJQb3NpdGlvbkZyb21Nb3VzZUV2ZW50KGV2ZW50OiBNb3VzZUV2ZW50LCBlZGl0b3I6IFRleHRFZGl0b3IsIGVkaXRvckVsZW1lbnQ6IE9iamVjdCk6ID9Qb2ludCB7XG4gIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5waXhlbFBvc2l0aW9uRm9yTW91c2VFdmVudChldmVudClcbiAgY29uc3Qgc2NyZWVuUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5zY3JlZW5Qb3NpdGlvbkZvclBpeGVsUG9zaXRpb24ocGl4ZWxQb3NpdGlvbilcbiAgaWYgKE51bWJlci5pc05hTihzY3JlZW5Qb3NpdGlvbi5yb3cpIHx8IE51bWJlci5pc05hTihzY3JlZW5Qb3NpdGlvbi5jb2x1bW4pKSByZXR1cm4gbnVsbFxuICAvLyBeIFdvcmthcm91bmQgZm9yIE5hTiBidWcgc3RlZWxicmFpbi9saW50ZXItdWktZGVmYXVsdCMxOTFcbiAgY29uc3QgZXhwZWN0ZWRQaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5waXhlbFBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIGNvbnN0IGRpZmZlcmVuY2VUb3AgPSBwaXhlbFBvc2l0aW9uLnRvcCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi50b3BcbiAgY29uc3QgZGlmZmVyZW5jZUxlZnQgPSBwaXhlbFBvc2l0aW9uLmxlZnQgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24ubGVmdFxuICAvLyBPbmx5IGFsbG93IG9mZnNldCBvZiAyMHB4IC0gRml4ZXMgc3RlZWxicmFpbi9saW50ZXItdWktZGVmYXVsdCM2M1xuICBpZiAoXG4gICAgKGRpZmZlcmVuY2VUb3AgPT09IDAgfHwgKGRpZmZlcmVuY2VUb3AgPiAwICYmIGRpZmZlcmVuY2VUb3AgPCAyMCkgfHwgKGRpZmZlcmVuY2VUb3AgPCAwICYmIGRpZmZlcmVuY2VUb3AgPiAtMjApKSAmJlxuICAgIChkaWZmZXJlbmNlTGVmdCA9PT0gMCB8fCAoZGlmZmVyZW5jZUxlZnQgPiAwICYmIGRpZmZlcmVuY2VMZWZ0IDwgMjApIHx8IChkaWZmZXJlbmNlTGVmdCA8IDAgJiYgZGlmZmVyZW5jZUxlZnQgPiAtMjApKVxuICApIHtcbiAgICByZXR1cm4gZWRpdG9yLmJ1ZmZlclBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdXNlRXZlbnROZWFyUG9zaXRpb24oZXZlbnQ6IE1vdXNlRXZlbnQsIGVkaXRvckVsZW1lbnQ6IE9iamVjdCwgc2NyZWVuUG9zaXRpb246IFBvaW50LCBlbGVtZW50V2lkdGg6IG51bWJlciwgZWxlbWVudEhlaWdodDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGNvbnN0IHBpeGVsUG9zaXRpb24gPSBlZGl0b3JFbGVtZW50LmNvbXBvbmVudC5waXhlbFBvc2l0aW9uRm9yTW91c2VFdmVudChldmVudClcbiAgY29uc3QgZXhwZWN0ZWRQaXhlbFBvc2l0aW9uID0gZWRpdG9yRWxlbWVudC5waXhlbFBvc2l0aW9uRm9yU2NyZWVuUG9zaXRpb24oc2NyZWVuUG9zaXRpb24pXG4gIGNvbnN0IGRpZmZlcmVuY2VUb3AgPSBwaXhlbFBvc2l0aW9uLnRvcCAtIGV4cGVjdGVkUGl4ZWxQb3NpdGlvbi50b3BcbiAgY29uc3QgZGlmZmVyZW5jZUxlZnQgPSBwaXhlbFBvc2l0aW9uLmxlZnQgLSBleHBlY3RlZFBpeGVsUG9zaXRpb24ubGVmdFxuICBpZiAoZGlmZmVyZW5jZVRvcCA9PT0gMCAmJiBkaWZmZXJlbmNlTGVmdCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKChkaWZmZXJlbmNlVG9wID4gMCAmJiBkaWZmZXJlbmNlVG9wID4gKGVsZW1lbnRIZWlnaHQgKyAyMCkpIHx8IChkaWZmZXJlbmNlVG9wIDwgMCAmJiBkaWZmZXJlbmNlVG9wIDwgLTUpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKGRpZmZlcmVuY2VMZWZ0ID4gMTUgJiYgZGlmZmVyZW5jZVRvcCA8IDE3KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIChkaWZmZXJlbmNlTGVmdCA+IDAgJiYgZGlmZmVyZW5jZUxlZnQgPCAoZWxlbWVudFdpZHRoICsgMjApKSB8fCAoZGlmZmVyZW5jZUxlZnQgPCAwICYmIGRpZmZlcmVuY2VMZWZ0ID4gLTUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQYXJlbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIHNlbGVjdG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgZG8ge1xuICAgIGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyAkRmxvd0lnbm9yZTogSXQncyBwYXJlbnQgaXMgYW4gSFRNTEVsZW1lbnQsIG5vdCBhIE5PREUhXG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9IHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgIT09ICdIVE1MJylcbiAgcmV0dXJuIGZhbHNlXG59XG4iXX0=