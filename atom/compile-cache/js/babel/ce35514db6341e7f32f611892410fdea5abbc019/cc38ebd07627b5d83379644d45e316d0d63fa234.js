function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _jasmineFix = require('jasmine-fix');

var _libCommands = require('../lib/commands');

var _libCommands2 = _interopRequireDefault(_libCommands);

var commands = undefined;

describe('Linter Commands', function () {
  beforeEach(function () {
    if (commands) {
      commands.dispose();
    }
    commands = new _libCommands2['default']();
    // Initial workspace view
    atom.views.getView(atom.workspace);
  });
  (0, _jasmineFix.it)('properly notifies its listeners of command execution', _asyncToGenerator(function* () {
    var lintCalled = 0;
    var debugCalled = 0;
    var toggleActiveCalled = 0;
    var toggleLinterCalled = [];

    commands.onShouldLint(function () {
      return ++lintCalled;
    });
    commands.onShouldToggleActiveEditor(function () {
      return ++toggleActiveCalled;
    });
    commands.onShouldDebug(function () {
      return ++debugCalled;
    });
    commands.onShouldToggleLinter(function (type) {
      return toggleLinterCalled.push(type);
    });

    yield atom.workspace.open(_path2['default'].join(__dirname, 'fixtures', 'file.txt'));
    var textEditor = atom.views.getView(atom.workspace.getActiveTextEditor());

    expect(lintCalled).toBe(0);
    expect(debugCalled).toBe(0);
    expect(toggleActiveCalled).toBe(0);
    expect(toggleLinterCalled).toEqual([]);
    atom.commands.dispatch(textEditor, 'linter:lint');
    expect(lintCalled).toBe(1);
    expect(debugCalled).toBe(0);
    expect(toggleActiveCalled).toBe(0);
    expect(toggleLinterCalled).toEqual([]);
    atom.commands.dispatch(textEditor, 'linter:toggle-active-editor');
    expect(lintCalled).toBe(1);
    expect(toggleActiveCalled).toBe(1);
    expect(debugCalled).toBe(0);
    expect(toggleLinterCalled).toEqual([]);
    atom.commands.dispatch(textEditor, 'linter:debug');
    expect(lintCalled).toBe(1);
    expect(debugCalled).toBe(1);
    expect(toggleActiveCalled).toBe(1);
    expect(toggleLinterCalled).toEqual([]);
    atom.commands.dispatch(textEditor, 'linter:enable-linter');
    expect(lintCalled).toBe(1);
    expect(debugCalled).toBe(1);
    expect(toggleActiveCalled).toBe(1);
    expect(toggleLinterCalled).toEqual(['enable']);
    atom.commands.dispatch(textEditor, 'linter:disable-linter');
    expect(lintCalled).toBe(1);
    expect(debugCalled).toBe(1);
    expect(toggleActiveCalled).toBe(1);
    expect(toggleLinterCalled).toEqual(['enable', 'disable']);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haC8uYXRvbS9wYWNrYWdlcy9saW50ZXIvc3BlYy9jb21tYW5kcy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7b0JBRWlCLE1BQU07Ozs7MEJBQ0osYUFBYTs7MkJBQ1gsaUJBQWlCOzs7O0FBRXRDLElBQUksUUFBUSxZQUFBLENBQUE7O0FBRVosUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQVc7QUFDckMsWUFBVSxDQUFDLFlBQVc7QUFDcEIsUUFBSSxRQUFRLEVBQUU7QUFDWixjQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7S0FDbkI7QUFDRCxZQUFRLEdBQUcsOEJBQWMsQ0FBQTs7QUFFekIsUUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0dBQ25DLENBQUMsQ0FBQTtBQUNGLHNCQUFHLHNEQUFzRCxvQkFBRSxhQUFpQjtBQUMxRSxRQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7QUFDbEIsUUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFBO0FBQ25CLFFBQUksa0JBQWtCLEdBQUcsQ0FBQyxDQUFBO0FBQzFCLFFBQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFBOztBQUU3QixZQUFRLENBQUMsWUFBWSxDQUFDO2FBQU0sRUFBRSxVQUFVO0tBQUEsQ0FBQyxDQUFBO0FBQ3pDLFlBQVEsQ0FBQywwQkFBMEIsQ0FBQzthQUFNLEVBQUUsa0JBQWtCO0tBQUEsQ0FBQyxDQUFBO0FBQy9ELFlBQVEsQ0FBQyxhQUFhLENBQUM7YUFBTSxFQUFFLFdBQVc7S0FBQSxDQUFDLENBQUE7QUFDM0MsWUFBUSxDQUFDLG9CQUFvQixDQUFDLFVBQUEsSUFBSTthQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7S0FBQSxDQUFDLENBQUE7O0FBRXBFLFVBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQUssSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFD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QUFDLENBQUMsQ0FBQTtHQUMxRCxFQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL1VzZXJzL2FoLy5hdG9tL3BhY2thZ2VzL2xpbnRlci9zcGVjL2NvbW1hbmRzLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgaXQgfSBmcm9tICdqYXNtaW5lLWZpeCdcbmltcG9ydCBDb21tYW5kcyBmcm9tICcuLi9saWIvY29tbWFuZHMnXG5cbmxldCBjb21tYW5kc1xuXG5kZXNjcmliZSgnTGludGVyIENvbW1hbmRzJywgZnVuY3Rpb24oKSB7XG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgaWYgKGNvbW1hbmRzKSB7XG4gICAgICBjb21tYW5kcy5kaXNwb3NlKClcbiAgICB9XG4gICAgY29tbWFuZHMgPSBuZXcgQ29tbWFuZHMoKVxuICAgIC8vIEluaXRpYWwgd29ya3NwYWNlIHZpZXdcbiAgICBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UpXG4gIH0pXG4gIGl0KCdwcm9wZXJseSBub3RpZmllcyBpdHMgbGlzdGVuZXJzIG9mIGNvbW1hbmQgZXhlY3V0aW9uJywgYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGxpbnRDYWxsZWQgPSAwXG4gICAgbGV0IGRlYnVnQ2FsbGVkID0gMFxuICAgIGxldCB0b2dnbGVBY3RpdmVDYWxsZWQgPSAwXG4gICAgY29uc3QgdG9nZ2xlTGludGVyQ2FsbGVkID0gW11cblxuICAgIGNvbW1hbmRzLm9uU2hvdWxkTGludCgoKSA9PiArK2xpbnRDYWxsZWQpXG4gICAgY29tbWFuZHMub25TaG91bGRUb2dnbGVBY3RpdmVFZGl0b3IoKCkgPT4gKyt0b2dnbGVBY3RpdmVDYWxsZWQpXG4gICAgY29tbWFuZHMub25TaG91bGREZWJ1ZygoKSA9PiArK2RlYnVnQ2FsbGVkKVxuICAgIGNvbW1hbmRzLm9uU2hvdWxkVG9nZ2xlTGludGVyKHR5cGUgPT4gdG9nZ2xlTGludGVyQ2FsbGVkLnB1c2godHlwZSkpXG5cbiAgICBhd2FpdCBhdG9tLndvcmtzcGFjZS5vcGVuKFBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycsICdmaWxlLnR4dCcpKVxuICAgIGNvbnN0IHRleHRFZGl0b3IgPSBhdG9tLnZpZXdzLmdldFZpZXcoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpKVxuXG4gICAgZXhwZWN0KGxpbnRDYWxsZWQpLnRvQmUoMClcbiAgICBleHBlY3QoZGVidWdDYWxsZWQpLnRvQmUoMClcbiAgICBleHBlY3QodG9nZ2xlQWN0aXZlQ2FsbGVkKS50b0JlKDApXG4gICAgZXhwZWN0KHRvZ2dsZUxpbnRlckNhbGxlZCkudG9FcXVhbChbXSlcbiAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoKHRleHRFZGl0b3IsICdsaW50ZXI6bGludCcpXG4gICAgZXhwZWN0KGxpbnRDYWxsZWQpLnRvQmUoMSlcbiAgICBleHBlY3QoZGVidWdDYWxsZWQpLnRvQmUoMClcbiAgICBleHBlY3QodG9nZ2xlQWN0aXZlQ2FsbGVkKS50b0JlKDApXG4gICAgZXhwZWN0KHRvZ2dsZUxpbnRlckNhbGxlZCkudG9FcXVhbChbXSlcbiAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoKHRleHRFZGl0b3IsICdsaW50ZXI6dG9nZ2xlLWFjdGl2ZS1lZGl0b3InKVxuICAgIGV4cGVjdChsaW50Q2FsbGVkKS50b0JlKDEpXG4gICAgZXhwZWN0KHRvZ2dsZUFjdGl2ZUNhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdChkZWJ1Z0NhbGxlZCkudG9CZSgwKVxuICAgIGV4cGVjdCh0b2dnbGVMaW50ZXJDYWxsZWQpLnRvRXF1YWwoW10pXG4gICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCh0ZXh0RWRpdG9yLCAnbGludGVyOmRlYnVnJylcbiAgICBleHBlY3QobGludENhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdChkZWJ1Z0NhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdCh0b2dnbGVBY3RpdmVDYWxsZWQpLnRvQmUoMSlcbiAgICBleHBlY3QodG9nZ2xlTGludGVyQ2FsbGVkKS50b0VxdWFsKFtdKVxuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2godGV4dEVkaXRvciwgJ2xpbnRlcjplbmFibGUtbGludGVyJylcbiAgICBleHBlY3QobGludENhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdChkZWJ1Z0NhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdCh0b2dnbGVBY3RpdmVDYWxsZWQpLnRvQmUoMSlcbiAgICBleHBlY3QodG9nZ2xlTGludGVyQ2FsbGVkKS50b0VxdWFsKFsnZW5hYmxlJ10pXG4gICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCh0ZXh0RWRpdG9yLCAnbGludGVyOmRpc2FibGUtbGludGVyJylcbiAgICBleHBlY3QobGludENhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdChkZWJ1Z0NhbGxlZCkudG9CZSgxKVxuICAgIGV4cGVjdCh0b2dnbGVBY3RpdmVDYWxsZWQpLnRvQmUoMSlcbiAgICBleHBlY3QodG9nZ2xlTGludGVyQ2FsbGVkKS50b0VxdWFsKFsnZW5hYmxlJywgJ2Rpc2FibGUnXSlcbiAgfSlcbn0pXG4iXX0=