{
  "name": "space-pen",
  "version": "5.1.1",
  "description": "Write markup on the final frontier",
  "main": "./lib/space-pen.js",
  "scripts": {
    "prepublish": "grunt prepublish",
    "test": "grunt test",
    "start": "grunt start"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/space-pen/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/atom/space-pen.git"
  },
  "bugs": {
    "url": "https://github.com/atom/space-pen/issues"
  },
  "devDependencies": {
    "express": "~3.4.0",
    "coffee-script": "~1.6.3",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-cli": "~0.1.8",
    "grunt": "~0.4.1",
    "grunt-coffeelint": "0.0.6",
    "browserify": "~2.34.1",
    "jasmine-focused": "~0.15.0",
    "grunt-shell": "~0.5.0",
    "coffeeify": "~0.5.1",
    "grunt-contrib-connect": "~0.5.0",
    "grunt-atomdoc": "^1.0.0"
  },
  "dependencies": {
    "grim": "^1.0.0",
    "jquery": "^2.1.3",
    "underscore-plus": "1.x"
  },
  "readme": "# SpacePen [![Build Status](https://travis-ci.org/atom/space-pen.svg?branch=master)](https://travis-ci.org/atom/space-pen)\n\n**Version 5.x of SpacePen is intended to be included as a direct dependency of 1.0-compatible Atom packages. If you're looking for SpacePen 3.x, used in [Atom Core](https://github.com/atom/atom), check out the [3.x branch](https://github.com/atom/space-pen/tree/3.x).**\n\n## Write markup on the final frontier\n\nSpacePen is a powerful but minimalistic client-side view framework for\nCoffeeScript. It combines the \"view\" and \"controller\" into a single jQuery\nobject, whose markup is expressed with an embedded DSL similar to Markaby for\nRuby.\n\n## Changes In Version 4\n\nThis version of SpacePen depends on HTML 5 custom elements to support lifecycle\nhooks that previously depended on all DOM manipulation being performed via\njQuery. The `afterAttach` and `beforeRemove` hooks have been replaced with\n`attached` and `detached` and their semantics have been altered.\n\nIf you need to use SpacePen in an environment that doesn't support custom\nelements, consider using the previous major version or switching frameworks.\n\n## Basics\n\nView objects extend from the View class and have a @content class method where\nyou express their HTML contents with an embedded markup DSL:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 \"Spacecraft\"\n      @ol =>\n        @li \"Apollo\"\n        @li \"Soyuz\"\n        @li \"Space Shuttle\"\n```\n\nViews descend from jQuery's prototype, so when you construct one you can call\njQuery methods on it just as you would a DOM fragment created with `$(...)`.\n\n```coffeescript\nview = new Spacecraft\nview.find('ol').append('<li>Star Destroyer</li>')\n\nview.on 'click', 'li', ->\n  alert \"They clicked on #{$(this).text()}\"\n```\n\nBut SpacePen views are more powerful than normal jQuery fragments because they\nlet you define custom methods:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  addSpacecraft: (name) ->\n    @find('ol').append \"<li>#{name}</li>\"\n\n\nview = new Spacecraft\nview.addSpacecraft \"Enterprise\"\n```\n\nYou can also pass arguments on construction, which get passed to both the\n`@content` method and the view's constructor.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: (params) ->\n    @div =>\n      @h1 params.title\n      @ol =>\n        @li name for name in params.spacecraft\n\nview = new Spacecraft(title: \"Space Weapons\", spacecraft: [\"TIE Fighter\", \"Death Star\", \"Warbird\"])\n```\n\nMethods from the jQuery prototype can be gracefully overridden using `super`:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  hide: ->\n    console.log \"Hiding Spacecraft List\"\n    super()\n```\n\nIf you override the View class's constructor, ensure you call `super`.\nAlternatively, you can define an `initialize` method, which the constructor will\ncall for you automatically with the constructor's arguments.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  initialize: (params) ->\n    @title = params.title\n```\n\n## Outlets and Events\n\nSpacePen will automatically create named reference for any element with an\n`outlet` attribute. For example, if the `ol` element has an attribute\n`outlet=list`, the view object will have a `list` entry pointing to a jQuery\nwrapper for the `ol` element.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 \"Spacecraft\"\n      @ol outlet: \"list\", =>\n        @li \"Apollo\"\n        @li \"Soyuz\"\n        @li \"Space Shuttle\"\n\n  addSpacecraft: (name) ->\n    @list.append(\"<li>#{name}</li>\")\n```\n\nElements can also have event name attributes whose value references a custom\nmethod. For example, if a `button` element has an attribute\n`click=launchSpacecraft`, then SpacePen will invoke the `launchSpacecraft`\nmethod on the button's parent view when it is clicked:\n\n```coffeescript\nclass Spacecraft extends View\n  @content: ->\n    @div =>\n      @h1 \"Spacecraft\"\n      @ol =>\n        @li click: 'launchSpacecraft', \"Saturn V\"\n\n  launchSpacecraft: (event, element) ->\n    console.log \"Preparing #{element.name} for launch!\"\n```\n## Markup DSL Details\n\n### Tag Methods (`@div`, `@h1`, etc.)\n\nAs you've seen so far, the markup DSL is pretty straightforward. From the\n`@content` class method or any method it calls, just invoke instance methods\nnamed for the HTML tags you want to generate. There are 3 types of arguments you\ncan pass to a tag method:\n\n* *Strings*: The string will be HTML-escaped and used as the text contents of the generated tag.\n\n* *Hashes*: The key-value pairs will be used as the attributes of the generated tag.\n\n* *Functions* (bound with `=>`): The function will be invoked in-between the open and closing tag to produce the HTML element's contents.\n\nIf you need to emit a non-standard tag, you can use the `@tag(name, args...)`\nmethod to name the tag with a string:\n\n```coffeescript\n@tag 'bubble', type: \"speech\", => ...\n```\n\n### Text Methods\n\n* `@text(string)`: Emits the HTML-escaped string as text wherever it is called.\n\n* `@raw(string)`: Passes the given string through unescaped. Use this when you need to emit markup directly that was generated beforehand.\n\n## Subviews\n\nSubviews are a great way to make your view code more modular. The\n`@subview(name, view)` method takes a name and another view object. The view\nobject will be inserted at the location of the call, and a reference with the\ngiven name will be wired to it from the parent view. A `parentView` reference\nwill be created on the subview pointing at the parent.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: (params) ->\n    @div =>\n      @subview 'launchController', new LaunchController(countdown: params.countdown)\n      @h1 \"Spacecraft\"\n      ...\n```\n\n## Freeform Markup Generation\n\nYou don't need a View class to use the SpacePen markup DSL. Call `View.render`\nwith an unbound function (`->`, not `=>`) that calls tag methods, and it will\nreturn a document fragment for ad-hoc use. This method is also assigned to the\n`$$` global variable for convenience.\n\n```coffeescript\nview.list.append $$ ->\n  @li =>\n    @text \"Starship\"\n    @em \"Enterprise\"\n```\n\n## jQuery extensions\n\n### $.fn.view\nYou can retrieve the view object for any DOM element by calling `view()` on it.\nThis usually shouldn't be necessary, as most DOM manipulation will take place\nwithin the view itself using outlet references, but is occasionally helpful.\n\n```coffeescript\nview = new Spacecraft\n$('body').append(view)\n\n# assuming no other li elements on the DOM, for example purposes,\n# the following expression should be true\n$('li').view() == view\n```\n\n### Attached/Detached Hooks\nThe `initialize` method is always called when the view is still a detached DOM\nfragment, before it is appended to the DOM. This is usually okay, but\noccasionally you'll have some initialization logic that depends on the view\nactually being on the DOM. For example, you may depend on applying a CSS rule\nbefore measuring an element's height.\n\nFor these situations, use the `attached` hook. It will be called whenever your\nelement is actually attached to the DOM. Past versions of SpacePen would also\ncall this hook when your element was attached to another detached node, but that\nbehavior is no longer supported.\n\nTo be notified when your element is detached from the DOM, implement the\n`detached` hook.\n\n```coffeescript\nclass Spacecraft extends View\n  @content: -> ...\n\n  attached: ->\n    console.log \"With CSS applied, my height is\", @height()\n\n  detached: ->\n    console.log \"I have been detached.\"\n```\n\n## Hacking on SpacePen\n\n```sh\ngit clone https://github.com/atom/space-pen.git\ncd space-pen\nnpm install\nnpm start\n```\n\n* Open http://localhost:1337 to run the specs\n* Open http://localhost:1337/benchmark to run the benchmarks\n* Open http://localhost:1337/examples to browse the examples\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/atom/space-pen",
  "_id": "space-pen@5.1.1",
  "_from": "space-pen@>=5.0.1 <6.0.0"
}
