{
  "name": "atom-space-pen-views",
  "version": "2.0.3",
  "description": "Atom SpacePen views that used to live in core.",
  "main": "./lib/main",
  "scripts": {
    "prepublish": "grunt clean lint coffee"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/atom/atom-space-pen-views.git"
  },
  "bugs": {
    "url": "https://github.com/atom/atom-space-pen-views/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/atom-space-pen-views/raw/master/LICENSE.md"
    }
  ],
  "dependencies": {
    "fuzzaldrin": "^2.1.0",
    "grim": "^1.0.0",
    "space-pen": "^5.0.1"
  },
  "devDependencies": {
    "coffee-script": "^1.7.0",
    "jasmine-focused": "^1.0.4",
    "grunt-contrib-coffee": "^0.9.0",
    "grunt-cli": "^0.1.8",
    "grunt": "^0.4.1",
    "grunt-coffeelint": "^0.0.6",
    "rimraf": "^2.2.2",
    "coffee-cache": "^0.2.0",
    "temp": "^0.6.0"
  },
  "readme": "# Atom SpacePen Views\n\nThis library contains SpacePen views that used to be provided as part of Atom\nCore. `TextEditorView`, `SelectListView`, and `ScrollView` exports from the\n`atom` module are now deprecated will soon be removed, but can still be used in\npackages by depending on this library in your `package.json`.\n\n## TextEditorView\n\nA text editor can now be created in Atom by inserting an `<atom-text-editor>`\ntag in any location you want an editor. However, if you still want to use the\nSpacePen view in order to conveniently convert packages off the deprecated\nexport, you can use this class.\n\n### Example\n\n```coffee\n{View} = require 'space-pen'\n{TextEditorView} = require 'atom-space-pen-views'\n\nclass MyView extends View\n  @content: ->\n    @div =>\n      @div \"Type your answer:\"\n      @subview 'answer', new TextEditorView(mini: true)\n```\n\n### Constructor Params\n\nPass an optional params object to the constructor with the following keys:\n\n* `mini` If `true`, will construct a single-line editor for use as an input\n    field.\n* `placeholderText` A string of placeholder text to appear in the editor when\n    empty\n\n### Methods\n\n#### `::getModel`\n\nReturns the underlying `TextEditor` model instance.\n\n## ScrollView\n\n Handles several core events to update scroll position:\n\n * `core:move-up` Scrolls the view up\n * `core:move-down` Scrolls the view down\n * `core:page-up` Scrolls the view up by the height of the page\n * `core:page-down` Scrolls the view down by the height of the page\n * `core:move-to-top` Scrolls the editor to the top\n * `core:move-to-bottom` Scroll the editor to the bottom\n\n Subclasses must call `super` if overriding the `initialize` method.\n\n### Example\n\n ```coffee\n {ScrollView} = require 'atom-space-pen-views'\n\n class MyView extends ScrollView\n   @content: ->\n     @div()\n\n   initialize: ->\n     super\n     @text('super long content that will scroll')\n ```\n\n## SelectListView\n\nEssential: Provides a view that renders a list of items with an editor that\nfilters the items. Used by many packages such as the fuzzy-finder,\ncommand-palette, symbols-view and autocomplete.\n\n\n### Example\n\n```coffee\n{SelectListView} = require 'atom-space-pen-views'\n\nclass MySelectListView extends SelectListView\n initialize: ->\n   super\n   @addClass('overlay from-top')\n   @setItems(['Hello', 'World'])\n   atom.workspaceView.append(this)\n   @focusFilterEditor()\n\n viewForItem: (item) ->\n   \"<li>#{item}</li>\"\n\n confirmed: (item) ->\n   console.log(\"#{item} was selected\")\n```\n\n## Methods\n\n### Subclasses Must Implement\n\n#### `::viewForItem`\n\nCreate a view for the given model item. This method must be overridden by\nsubclasses. Called when the item is about to appended to the list view.\n\n* `item` The model item being rendered. This will always be one of the items\n  previously passed to `::setItems`.\n\nReturns a String of HTML, DOM element, jQuery object, or View.\n\n#### `::confirmed`\n\nCallback function for when an item is selected. This method must\nbe overridden by subclasses.\n\n* `item` The selected model item. This will always be one of the items\n  previously passed to `::setItems`.\n\nReturns a DOM element, jQuery object, or {View}.\n\n### Managing the list of items\n\n#### `::setItems`\n\nSet the array of items to display in the list. This should be\nmodel items, not actual views. `::viewForItem` will be called to render the\nitem when it is being appended to the list view.\n\n* `items` The array of model items to display in the list (default: []).\n\n#### `::getSelectedItem`\n\nGet the model item that is currently selected in the list view.\n\n#### `::getFilterKey`\n\nGet the property name to use when filtering items.\n\nThis method may be overridden by classes to allow fuzzy filtering based\non a specific property of the item objects.\n\nFor example if the objects you pass to {::setItems} are of the type\n`{\"id\": 3, \"name\": \"Atom\"}` then you would return `\"name\"` from this method\nto fuzzy filter by that property when text is entered into this view's\neditor.\n\n\n#### `::getFilterQuery`\n\nGet the filter query to use when fuzzy filtering the visible elements.\n\nBy default this method returns the text in the mini editor but it can be\noverridden by subclasses if needed.\n\nReturns a {String} to use when fuzzy filtering the elements to display.\n\n\n#### `::setMaxItems`\n\nSet the maximum numbers of items to display in the list.\n\n* `maxItems` The maximum {Number} of items to display.\n\n#### `::populateList`\n\nExtended: Populate the list view with the model items previously set by calling\n{::setItems}.\n\nSubclasses may override this method but should always call `super`.\n\n### Messages\n\n#### `::setError`\n\nSet the error message to display.\n\n* `message` A string with an error message (default: '').\n\n#### `::setLoading`\n\nSet the loading message to display.\n\n* `message` A string with a loading message (default: '').\n\n#### `::getEmptyMessage`\n\nGet the message to display when there are no items.\n\nSubclasses may override this method to customize the message.\n\n* `itemCount` The {Number} of items in the array specified to {::setItems}\n* `filteredItemCount` The {Number} of items that pass the fuzzy filter test.\n\nReturns a {String} message (default: 'No matches found').\n\n### View Actions\n\n#### `::cancel`\n\nCancel and close this select list view.\n\nThis restores focus to the previously focused element if `::storeFocusedElement`\nwas called prior to this view being attached.\n\n#### `::focusFilterEditor`\n\nFocus the fuzzy filter editor view.\n\n#### `::storeFocusedElement`\n\nStore the currently focused element. This element will be given back focus when\n`::cancel` is called.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/atom/atom-space-pen-views",
  "_id": "atom-space-pen-views@2.0.3",
  "_from": "atom-space-pen-views@>=2.0.3 <3.0.0"
}
