'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Logger;

var _lodash = require('lodash');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _log(category, level) {
  var _console;

  var now = (0, _moment2.default)().format();

  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  (_console = console).log.apply(_console, [now + ' ' + level + ' [' + category + ']'].concat(args)); // eslint-disable-line no-console
}

function Logger(category) {
  this.category = category;
}

Logger.prototype.trace = function trace() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  _log.apply(undefined, [this.category, 'TRACE'].concat(args));
};

Logger.prototype.info = function info() {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  _log.apply(undefined, [this.category, 'INFO '].concat(args));
};

Logger.prototype.warn = function warn() {
  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  _log.apply(undefined, [this.category, 'WARN '].concat(args));
};

Logger.prototype.error = function error() {
  for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  _log.apply(undefined, [this.category, 'ERROR'].concat(args));
};

Logger.prototype.log = function log(level) {
  for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
    args[_key6 - 1] = arguments[_key6];
  }

  if ((0, _lodash.size)(args) === 1 && (0, _lodash.isObject)(args[0])) {
    _log(this.category, (0, _lodash.toUpper)(level), JSON.stringify(args[0]));
    return;
  }

  _log.apply(undefined, [this.category, (0, _lodash.toUpper)(level)].concat(args));
};