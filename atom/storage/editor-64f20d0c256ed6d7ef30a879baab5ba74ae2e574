{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":1280,"height":773,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/ah/Code/trebuchet"],"buffers":[{"id":"178aa05707f87fd689810c6707ecc4e1","text":"require 'active_support'\nrequire 'active_support/core_ext/hash'\nrequire 'active_support/inflector'\nrequire 'safe_yaml'\nrequire 'thor'\nrequire 'benchmark'\n\nrequire 'trebuchet/capistrano/cli'\nrequire 'trebuchet/parsers/node_parser'\n\nmodule Trebuchet\n  class CLI < ::Thor\n    include ::Thor::Actions\n    extend ::Thor::Actions\n\n    CONFIG_OPTIONS = [\n      'branch',\n      'deploy_strategy',\n      'nodes'\n    ].freeze\n\n    class_option(:all, :type => :boolean, :aliases => '-a', :desc => \"Use 'All' strategy (all in parallel) to deploy\")\n    class_option(:branch, :aliases => '-b', :desc => 'The name of the branch to deploy from (e.g. master, 2332_my_bug_fix). Must exist on origin.')\n    class_option(:config, :aliases => '-c', :default => 'config/trebuchet.yml', :desc => 'The config file to use (defaults to config/trebuchet.yml)')\n    class_option(:env, :aliases => '-e', :desc => 'The environment name to use when configuring/starting the deployed application.')\n    class_option(:excitement, :aliases => '-x', :type => :numeric, :desc => 'Level of excitedness!')\n    class_option(:halfsies, :aliases => '-h', :type => :boolean, :desc => \"Use half&half strategy to attempt deploy with zero downtime\")\n    class_option(:host_env, :aliases => %w(-o --host_prefix), :desc => 'Env hostname prefix (e.g. \"prod\" from sa-prod-abacus1.moneydesktop.com).')\n    class_option(:node, :aliases => '-N', :desc => 'Specific node to deploy to (e.g. 9)')\n    class_option(:nodes, :aliases => '-n', :desc => 'Number of nodes to deploy to (e.g. 9, 3..7, 1...10)')\n    class_option(:rolling, :aliases => '-r', :type => :boolean, :desc => \"Use rolling strategy (1 at a time) to attempt deploy with zero downtime\")\n    class_option(:site, :aliases => '-s', :desc => 'The site to deploy into (e.g. \"sa\", \"sb\", \"po\"). Required.')\n    class_option(:skip_assets, :type => :boolean, :desc => 'Precompile assets while deploying. Defaults to false when passed.')\n    class_option(:skip_nagios, :type => :boolean, :desc => 'Skip disabling Nagios when deploying')\n    class_option(:skip_notify, :type => :boolean, :desc => 'Skip notifying Honeybadger when deploying')\n    class_option(:skip_tags, :type => :boolean, :desc => 'Skip tagging the release when deploying')\n    class_option(:trips, :aliases => '-t', :type => :boolean, :desc => \"Use triples strategy (# nodes / 3) to attempt deploy with zero downtime\")\n    class_option(:verbose, :aliases => '-v', :type => :boolean, :desc => \"Print as much info as possible regarding commands to run\")\n\n    default_task :sand\n\n    desc 'tasks', 'Capistrano tasks'\n    def tasks(*)\n      ::Trebuchet::Capistrano::CLI.execute!(['-T'])\n    end\n\n    desc 'development cap_command_1 [, cap_command_2, ...]', 'Invoke capistrano command(s) against the given server(s) in dev'\n    def development(*cap_commands)\n      say '=================================[development]===', :blue\n      say\n      parse_trebuchet_config(:development)\n\n      append_option_or_default(cap_commands, :branch, :master)\n      append_option_or_default(cap_commands, :env, :development)\n      append_option_or_default(cap_commands, :host_env, :dev)\n\n      cap(*cap_commands)\n    end\n\n    desc 'dev ...', 'Alias for development'\n    alias_method :dev, :development\n\n    desc 'sandbox cap_command_1 [, cap_command_2, ...]', 'Invoke capistrano command(s) against the given server(s) in sandbox'\n    def sandbox(*cap_commands)\n      say '=================================[sandbox]===', :blue\n      say\n\n      append_option_or_default(cap_commands, :branch, :master)\n      append_option_or_default(cap_commands, :env, :sandbox)\n      append_option_or_default(cap_commands, :host_env, :sand)\n\n      site = append_option_or_default(cap_commands, :site, :sa)\n\n      parse_trebuchet_config(:sandbox, site)\n\n      cap(*cap_commands)\n    end\n\n    desc 'sand ...', 'Alias for sandbox'\n    alias_method :sand, :sandbox\n\n    desc 'quality_assurance cap_command_1 [, cap_command_2, ...]', 'Invoke capistrano command(s) against the given server(s) in qa'\n    def quality_assurance(*cap_commands)\n      say '=================================[qa]===', :blue\n      say\n\n      append_option_or_default(cap_commands, :branch, :qa)\n      append_option_or_default(cap_commands, :env, :qa)\n      append_option_or_default(cap_commands, :host_env, :qa)\n\n      site = append_option_or_default(cap_commands, :site, :po)\n\n      parse_trebuchet_config(:qa, site)\n\n      cap(*cap_commands)\n    end\n\n    desc 'qa ...', 'Alias for quality_assurance'\n    alias_method :qa, :quality_assurance\n\n    desc 'corporate cap_command_1 [, cap_command_2, ...]', 'Invoke capistrano command(s) against the given server(s) in corp'\n    def corporate(*cap_commands)\n      say '=================================[corp]===', :blue\n      say\n\n      append_option_or_default(cap_commands, :branch, :master)\n      append_option_or_default(cap_commands, :env, :corporate)\n      append_option_or_default(cap_commands, :host_env, :corp)\n      append_option_or_default(cap_commands, :skip_nagios, true)\n\n      site = append_option_or_default(cap_commands, :site, :sd)\n\n      parse_trebuchet_config(:corporate, site)\n\n      cap(*cap_commands)\n    end\n\n    desc 'corp ...', 'Alias for corporate'\n    alias_method :corp, :corporate\n\n    desc 'integration cap_command_1 [, cap_command_2, ...]', 'Invoke capistrano command(s) against the given server(s) in integrations'\n    def integration(*cap_commands)\n      say '=================================[int]===', :blue\n      say\n\n      append_option_or_default(cap_commands, :branch, :stable)\n      append_option_or_default(cap_commands, :env, :production)\n      append_option_or_default(cap_commands, :host_env, :prod)\n\n      site = append_option_or_default(cap_commands, :site, :sb)\n\n      parse_trebuchet_config(:integration, site)\n\n      cap(*cap_commands)\n    end\n\n    desc 'int ...', 'Alias for integration'\n    alias_method :int, :integration\n\n    desc 'production cap_command_1 [, cap_command_2, ...]', 'Invoke capistrano command(s) against the given server(s) in production'\n    def production(*cap_commands)\n      say '=================================[production]===', :blue\n      say\n\n      ##\n      # Do not need to enforce authority when read-only requests are executed\n      #\n      unless cap_command_is?(cap_commands, \"head\", \"info\", \"release\", \"sha\", \"status\")\n        enforce_confirmation!\n      end\n\n      append_option_or_default(cap_commands, :branch, :stable)\n      append_option_or_default(cap_commands, :env, :production)\n      append_option_or_default(cap_commands, :host_env, :prod)\n\n      site = append_option_or_default(cap_commands, :site, :sc)\n\n      parse_trebuchet_config(:production, site)\n\n      cap(*cap_commands)\n    end\n\n    desc 'prod ...', 'Alias for production'\n    alias_method :prod, :production\n\n    no_tasks do\n\n      def add_command(command_array, option, option_value)\n        command_array << \"--set-before\"\n        command_array << \"treb_#{option.to_s.underscore}=#{option_value}\"\n      end\n\n      def all?\n        # Either command line specified --all OR no specification elsewhere\n        options[:all] || config_all?\n      end\n\n      def append_option_or_default(command_array, option, default_value)\n        option_value = options[option] || default_value\n\n        add_command(command_array, option, option_value)\n        option_value\n      end\n\n      def cap(*cap_commands)\n        # Running measure around the whole process to know the timing\n        ::Benchmark.measure do\n          local_options = options.dup\n\n          # Remove any of the keys that have already been added to the command by append_option_or_default\n          local_options.delete(:branch)\n          local_options.delete(:env)\n          local_options.delete(:host_env)\n          local_options.delete(:site)\n          local_options.delete(:node)\n          local_options.delete(:nodes)\n\n          node_groups = node_groups(cap_commands)\n          say \"Running commands on #{nodes_to_deploy.count} nodes using the #{deploy_strategy} strategy\", :blue\n\n          node_groups.each_with_index do |node_group, index|\n            local_commands = cap_commands.dup\n            node_group = [node_group].flatten.compact.uniq\n\n            # Do not deploy migrations except if the node_group includes node 1\n            unless node_group.include?(1)\n              if deploying_migrations?(cap_commands)\n                local_commands.map! { |command| command =~ /deploy:/i ? \"deploy\" : command }\n              end\n            end\n\n            say \"Group #{index + 1} of #{node_groups.size} (#{node_group.join(', ')})\", :magenta  if options[:verbose]\n\n            # Insert the nodes that should be deployed for this group\n            local_options[:node_groups] = node_groups.size\n            local_options[:node_group] = index + 1\n            local_options[:nodes] = node_group.join(\",\") # [1,2] => \"1,2\"\n\n            local_options.each_pair do |option, option_value|\n              add_command(local_commands, option, option_value)\n            end\n\n            # Only tag a release 1 time\n            conditionally_notify_honeybadger(local_commands)\n            conditionally_precompile_assets_locally(local_commands)\n            conditionally_tag_release(local_commands)\n\n            say \"cap \" << local_commands.join(\" \"), :green if options[:verbose]\n            ::Trebuchet::Capistrano::CLI.execute!(local_commands)\n            say \"Group ##{index + 1} complete.\", :green  if options[:verbose]\n          end\n        end\n      end\n\n      def cap_command_is?(commands, *command_types)\n        command_types.each do |command_type|\n          if commands.first == \"#{command_type}\"\n            return true\n          end\n        end\n\n        return false\n      end\n\n      def cap_command_matches?(command, *cap_commands)\n        cap_commands.flatten.any? { |cap_command| cap_command.include?(command) }\n      end\n\n      ##\n      # Returns 'true' if a specific \"command\" is already present in the\n      # command passed in\n      #\n      def commands_include?(commands, command_name)\n        command_name = command_name.to_s\n        command_with_prefix = command_name.include?(\"treb_\") ? command_name : \"treb_#{command_name}\"\n        return commands.any? { |command| command.include?(\"#{command_with_prefix}=\") }\n      end\n\n      def conditionally_notify_honeybadger(commands)\n        # If skip notify was originally specified then don't control anything\n        return if commands_include?(commands, :skip_notify)\n\n        # Save \"state\" that notifying has already been done the first time\n        if @has_notified_honeybadger.nil?\n          @has_notified_honeybadger = true\n        else\n          # first time through @has_notified_honeybadger will be set and release tagged\n          # after that we will execute the add_command and skip_tags\n          add_command(commands, :skip_notify, true)\n        end\n      end\n\n      def conditionally_precompile_assets_locally(commands)\n        # If skip assets was originally specified then don't control anything\n        return if commands_include?(commands, :skip_assets)\n\n        # Save \"state\" that assets have already been precompiled the first time\n        if @has_precompiled_assets.nil?\n          @has_precompiled_assets = true\n        else\n          # first time through @has_precompiled_assets will be set and assets will be precompiled\n          # after that we will execute the add_command and skip_local_assets\n          # use a different command here so we don't interfere with remote asset compilation\n          add_command(commands, :skip_local_assets, true)\n        end\n      end\n\n      def conditionally_tag_release(commands)\n        # If skip tags was originally specified then don't control anything\n        return if commands_include?(commands, :skip_tags)\n\n        # Save \"state\" that tagging has already been done the first time\n        if @has_tagged_release.nil?\n          @has_tagged_release = true\n        else\n          # first time through @has_tagged_release will be set and release tagged\n          # after that we will execute the add_command and skip_tags\n          add_command(commands, :skip_tags, true)\n        end\n      end\n\n      def config_all?\n        trebuchet_config &&\n          trebuchet_config[\"deploy_strategy\"] =~ /all/i\n      end\n\n      def config_halfsies?\n        trebuchet_config &&\n          trebuchet_config[\"deploy_strategy\"] =~ /halfsies/i\n      end\n\n      def config_rolling?\n        trebuchet_config &&\n          trebuchet_config[\"deploy_strategy\"] =~ /rolling/i\n      end\n\n      def config_trips?\n        trebuchet_config &&\n          trebuchet_config[\"deploy_strategy\"] =~ /trips/i\n      end\n\n      def deploy_strategy\n        case\n        when all? then\n          'all'\n        when halfsies? then\n          'halfsies'\n        when rolling? then\n          'rolling'\n        when trips? then\n          'trips'\n        end\n      end\n\n      def deploying_migrations?(cap_commands)\n        cap_command_matches?(\"deploy:migrat\", cap_commands)\n      end\n\n      def enforce_confirmation!\n        user_answer = nil\n\n        begin\n          mode = [:*, :+, :-].sample\n          maxRange1 = maxRange2 = 1\n          rangeShift1 = rangeShift2 = 1\n\n          case mode\n          when :* then\n            maxRange1 = maxRange2 = 12\n          when :+ then\n            maxRange1 = 40\n            maxRange2 = 20\n          when :- then\n            maxRange1 = maxRange2 = 20\n            rangeShift1 = 20\n          end\n          num1 = rand(maxRange1) + rangeShift1\n          num2 = rand(maxRange2) + rangeShift2\n          answer = num1.__send__(mode, num2)\n\n          say(\"\\n\\tNo sir. Try again.\\n\\n\", :red) unless user_answer.nil?\n\n          say(\"\\tDo Some Math: %d %s %d = \" % [num1, mode, num2], :yellow)\n          user_answer = $stdin.gets.chomp\n        end while(user_answer.to_i != answer)\n\n        say\n        say \"*** Achievement Unlocked! Deploying production.\", :green\n        say\n      end\n\n      def halfsies?\n        (options.halfsies? || config_halfsies?) &&\n          !options.rolling? && !options.trips? # only halfsies when not rolling and not trips\n      end\n\n      # Takes the node or nodes that were specified and returns them\n      # in groups based on the strat (rolling | all | halfsies) chosen\n      # 1..6 with rolling => [1, 2, 3, 4, 5, 6]\n      # 1..6 with halfsies => [[1, 2, 3], [4, 5, 6]]\n      # 1..6 with rolling and halfsies => [1, 2, 3, 4, 5, 6] <= chooses rolling\n      # 1..6 without strat => [[1, 2, 3, 4, 5, 6]]\n      def node_groups(cap_commands)\n        return @node_groups if @node_groups\n        nodes = nodes_to_deploy.flatten.compact.uniq.sort\n        @node_groups = []\n\n        if deploying_migrations?(cap_commands)\n          unless nodes.include?(1)\n            raise \"Node 1 must be a deploy target when deploying migrations.\"\n          end\n        end\n\n        case\n        when all? then\n          @node_groups << nodes # One group to deploy them all...\n        when trips? then\n          slice_size = nodes.size / 3\n          slice_size = 1 if slice_size < 1 # Make sure we can slice the nodes\n          nodes.each_slice(slice_size) { |slice| @node_groups << slice }\n        when halfsies? then\n          slice_size = nodes.size / 2\n          slice_size = 1 if slice_size < 1 # Make sure we can slice the nodes\n          nodes.each_slice(slice_size) { |slice| @node_groups << slice }\n        else # rolling?\n          nodes.each { |node| @node_groups << [ node ] } # To each, it's own group.\n        end\n\n        return @node_groups\n      end\n\n      # returns an array of nodes that must be deployed\n      def nodes_to_deploy\n        case\n        when options[:nodes] then\n          local_nodes = ::Trebuchet::Parsers::NodeParser.new(options[:nodes])\n          local_nodes.nodes\n        when options[:node] then\n          [ options[:node].to_i ]\n        when trebuchet_config[\"nodes\"] then\n          (1..trebuchet_config[\"nodes\"]).to_a\n        else\n          [ 1 ]\n        end\n      end\n\n      def parse_trebuchet_config(environment, site=nil)\n        environment = environment.to_s\n        site = site.to_s\n\n        config_path = File.expand_path(options[:config])\n\n        if File.exists?(config_path)\n          config = YAML.load_file(config_path, :safe => true)\n\n          @trebuchet_config = config\n\n          trebuchet_config.merge!(config[environment]) if config[environment]\n          trebuchet_config.merge!(config[site]) if site && config[site]\n          trebuchet_config.slice!(*CONFIG_OPTIONS)\n        end\n      end\n\n      def rolling?\n        (options.rolling? || config_rolling?)\n      end\n\n      def trebuchet_config\n        @trebuchet_config ||= {}\n      end\n\n      def trips?\n        (options.trips? || config_trips?) && !options.rolling?\n      end\n    end\n  end\nend\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"230":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"236":{"range":{"start":{"row":108,"column":63},"end":{"row":108,"column":64}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"237":{"range":{"start":{"row":108,"column":30},"end":{"row":108,"column":31}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"238":{"range":{"start":{"row":108,"column":63},"end":{"row":108,"column":63}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"240":{"range":{"start":{"row":108,"column":63},"end":{"row":108,"column":63}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"248":{"range":{"start":{"row":108,"column":0},"end":{"row":109,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"},"265":{"range":{"start":{"row":108,"column":63},"end":{"row":108,"column":64}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"266":{"range":{"start":{"row":108,"column":30},"end":{"row":108,"column":31}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":108,"column":63},"end":{"row":108,"column":63}},"properties":{"type":"selection","goalScreenRange":null,"clip":"forward","preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2},"7":{"id":"7","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":8,"history":{"version":3,"nextCheckpointId":22,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[107,9],[107,9]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[108,0],[108,0]],"newRange":[[108,0],[109,0]],"oldText":"","newText":"      append_option_or_default(cap_commands, :host_env, :corp)\n"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[108,9],[108,9]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[108,46],[108,61]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[108,46],[108,61]],"newRange":[[108,46],[108,46]],"oldText":"host_env, :corp","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[108,46],[108,46]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[108,46],[108,46]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[108,46],[108,46]],"newRange":[[108,46],[108,47]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[108,47],[108,47]],"newRange":[[108,47],[108,48]],"oldText":"","newText":"k"}},{"type":"change","content":{"oldRange":[[108,48],[108,48]],"newRange":[[108,48],[108,49]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[108,49],[108,49]],"newRange":[[108,49],[108,50]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[108,50],[108,50]],"newRange":[[108,50],[108,51]],"oldText":"","newText":"-"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[108,51],[108,51]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[108,51],[108,51]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[108,50],[108,51]],"newRange":[[108,50],[108,50]],"oldText":"-","newText":""}},{"type":"change","content":{"oldRange":[[108,50],[108,50]],"newRange":[[108,50],[108,51]],"oldText":"","newText":"_"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[108,51],[108,51]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[108,51],[108,51]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[108,46],[108,51]],"newRange":[[108,46],[108,57]],"oldText":"skip_","newText":"skip_nagios"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[108,57],[108,57]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[108,57],[108,57]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[108,57],[108,57]],"newRange":[[108,57],[108,58]],"oldText":"","newText":","}},{"type":"change","content":{"oldRange":[[108,58],[108,58]],"newRange":[[108,58],[108,59]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[108,59],[108,59]],"newRange":[[108,59],[108,60]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[108,60],[108,60]],"newRange":[[108,60],[108,61]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[108,61],[108,61]],"newRange":[[108,61],[108,62]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[108,62],[108,62]],"newRange":[[108,62],[108,63]],"oldText":"","newText":"e"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[108,63],[108,63]],"properties":{"type":"selection","goalScreenRange":null,"clip":"forward"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/ah/Code/trebuchet/lib/trebuchet/cli.rb","digestWhenLastPersisted":"d40b237cea7af33b910c0d52c237f7bcc6e00adb","preferredLineEnding":null,"nextMarkerId":267,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":458,"items":[{"deserializer":"TextEditor","id":459,"softTabs":true,"firstVisibleScreenRow":143,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":460,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/ah/Code/trebuchet/lib/trebuchet/cli.rb","bufferId":"178aa05707f87fd689810c6707ecc4e1","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/ah/Code/trebuchet/lib/trebuchet/cli.rb","focused":false,"flexScale":1},"activePaneId":458},"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/cli.rb","/Users/ah/Code/trebuchet/lib/trebuchet/cli.rb","/Users/ah/Code/trebuchet/Gemfile","/Users/ah/Code/trebuchet/lib/trebuchet/locale/en.yml","/Users/ah/Code/trebuchet/lib/trebuchet/chronical.rb","/Users/ah/Code/trebuchet/lib/core_ext/date_time.rb","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/plugins/utility.rb","/Users/ah/Code/trebuchet/lib/core_ext/time.rb","/Users/ah/Code/trebuchet/spec/trebuchet/cli_spec.rb","/Users/ah/Code/trebuchet/trebuchet.gemspec","atom://find-and-replace/project-results","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/hooks.rb","/Users/ah/Code/trebuchet/spec/trebuchet/capistrano/recipes_spec.rb","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/recipes/honeybadger.rb","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano.rb","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/settings.rb","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/recipes.rb","/Users/ah/Code/trebuchet/lib/trebuchet/capistrano/helpers.rb"]},"packageStates":{"fuzzy-finder":{"/Users/ah/Code/trebuchet/lib/trebuchet/cli.rb":1457309628930},"keybinding-resolver":{},"metrics":{"sessionLength":62249},"tree-view":{"directoryExpansionStates":{"/Users/ah/Code/trebuchet":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"coverage":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":true,"entries":{"trebuchet":{"isExpanded":true,"entries":{"capistrano":{"isExpanded":true,"entries":{"plugins":{"isExpanded":false,"entries":{}},"recipes":{"isExpanded":false,"entries":{}}}},"core_ext":{"isExpanded":false,"entries":{}},"locale":{"isExpanded":false,"entries":{}},"parsers":{"isExpanded":false,"entries":{}}}}}},"pkg":{"isExpanded":false,"entries":{}},"spec":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/ah/Code/trebuchet/lib/trebuchet/cli.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"findOptions":{"findPattern":"def append_option","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["^(\\ *)(.*)\\.sho","^(\\ *)(.*)\\.sh","^(\\ *)(.*)\\.should","should","failure_message_for_should","\"","its","deploy_migrate_commands","args","parse_trebuchet_config","po","def node_groups","Buttress","buttress","flat_comp","distance","to_day_range","round_to_nea","bod","beginning_of_date","beginning_of_day","buttress","honeybadger","client","def append_option"],"replaceHistory":["expect($1","expect(","expect($1).to receive","$1expect($2).to","'","commands"],"pathsHistory":["expect($1","expect(","expect($1).to receive","$1expect($2).to","'","commands"]},"tabs":[{}],"linter":{"scope":"File"}},"fullScreen":false}