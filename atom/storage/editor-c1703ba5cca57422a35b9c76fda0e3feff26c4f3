{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1280,"height":800,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/ah/.rvm/gems/ruby-2.2.0@amigo/gems/protobuf-activerecord-3.1.0"],"buffers":[{"text":"'active_support/concerns'\n\nmodule Protobuf\n  module ActiveRecord\n    module Serialization\n      extend ::ActiveSupport::Concern\n\n      included do\n        class << self\n          attr_writer :_protobuf_field_transformers,\n                      :_protobuf_field_options,\n                      :protobuf_message\n        end\n\n        private :_protobuf_convert_attributes_to_fields\n        private :_protobuf_field_transformers\n        private :_protobuf_message\n      end\n\n      module ClassMethods\n        # :nodoc:\n        def _protobuf_convert_attributes_to_fields(key, value)\n          return value if value.nil?\n\n          value = case\n                  when _protobuf_date_column?(key) then\n                    value.to_time.to_i\n                  when _protobuf_datetime_column?(key) then\n                    value.to_i\n                  when _protobuf_time_column?(key) then\n                    value.to_i\n                  when _protobuf_timestamp_column?(key) then\n                    value.to_i\n                  else\n                    value\n                  end\n\n          return value\n        end\n\n        def _protobuf_field_options\n          @_protobuf_field_options ||= {}\n        end\n\n        def _protobuf_field_transformers\n          @_protobuf_field_transformers ||= {}\n        end\n\n        # Define a field transformation from a record. Accepts a Symbol,\n        # callable, or block that is called with the record being serialized.\n        #\n        # When given a callable or block, it is directly used to convert the field.\n        #\n        # When a symbol is given, it extracts the method with the same name.\n        #\n        # The callable or method must accept a single parameter, which is the\n        # proto message.\n        #\n        # Examples:\n        #   field_from_record :public_key, :convert_public_key_to_proto\n        #   field_from_record :status, lambda { |record| # Do some stuff... }\n        #   field_from_record :status do |record|\n        #     # Do some blocky stuff...\n        #   end\n        #\n        def field_from_record(field, transformer = nil, &block)\n          transformer ||= block\n\n          if transformer.is_a?(Symbol)\n            callable = lambda { |value| self.__send__(transformer, value) }\n          else\n            callable = transformer\n          end\n\n          unless callable.respond_to?(:call)\n            raise FieldTransformerError\n          end\n\n          _protobuf_field_transformers[field.to_sym] = callable\n        end\n\n        # Define the protobuf fields that will be automatically serialized (by default,\n        # all fields will be serialized). Accepts any number of field names and is\n        # equivalent to passing the :only option to `protobuf_message`.\n        #\n        # If :except is specified, all fields except the specified fields will be serialized.\n        #\n        # By default, deprecated fields will be serialized. To exclude deprecated\n        # fields, pass :deprecated => false in the options hash.\n        #\n        # Examples:\n        #   protobuf_fields :guid, :name\n        #   protobuf_fields :except => :email_domain\n        #   protobuf_fields :except => :email_domain, :deprecated => false\n        #\n        def protobuf_fields(*fields)\n          options = fields.extract_options!\n          options[:only] = fields if fields.present?\n\n          self._protobuf_field_options = options\n        end\n\n        # Define the protobuf message class that should be used to serialize the\n        # object to protobuf. Accepts a string or symbol and an options hash.\n        #\n        # When protobuf_message is declared, Protoable automatically extracts the\n        # fields from the message and automatically adds a to_proto method that\n        # serializes the object to protobuf.\n        #\n        # The fields that will be automatically serialized can be configured by\n        # passing :only or :except in the options hash. If :only is specified, only\n        # the specified fields will be serialized. If :except is specified, all\n        # field except the specified fields will be serialized.\n        #\n        # By default, deprecated fields will be serialized. To exclude deprecated\n        # fields, pass :deprecated => false in the options hash.\n        #\n        # Examples:\n        #   protobuf_message :user_message\n        #   protobuf_message \"UserMessage\"\n        #   protobuf_message \"Namespaced::UserMessage\"\n        #   protobuf_message :user_message, :only => [ :guid, :name ]\n        #   protobuf_message :user_message, :except => :email_domain\n        #   protobuf_message :user_message, :except => :email_domain, :deprecated => false\n        #\n        def protobuf_message(message = nil, options = {})\n          unless message.nil?\n            @protobuf_message = message.to_s.classify.constantize\n            self._protobuf_field_options = options\n          end\n\n          @protobuf_message\n        end\n      end\n\n      # :nodoc:\n      def _filter_field_attributes(options = {})\n        options = _normalize_options(options)\n\n        binding.pry\n\n        fields = _filtered_fields(options)\n        fields &= [ options[:only] ].flatten if options[:only].present?\n        fields -= [ options[:except] ].flatten if options[:except].present?\n\n        fields\n      end\n\n      # :nodoc:\n      def _filtered_fields(options = {})\n        exclude_deprecated = ! options.fetch(:deprecated, true)\n\n        fields = self.class.protobuf_message.all_fields.map do |field|\n          next if field.nil?\n          next if exclude_deprecated && field.deprecated?\n          field.name.to_sym\n        end\n        fields.compact!\n\n        fields\n      end\n\n      # :nodoc:\n      def _normalize_options(options)\n        options ||= {}\n        options[:only] ||= [] if options.fetch(:except, false)\n        options[:except] ||= [] if options.fetch(:only, false)\n\n        self.class._protobuf_field_options.merge(options)\n      end\n\n      # Extracts attributes that correspond to fields on the specified protobuf\n      # message, performing any necessary column conversions on them. Accepts a\n      # hash of options for specifying which fields should be serialized.\n      #\n      # Examples:\n      #   fields_from_record(:only => [ :guid, :name ])\n      #   fields_from_record(:except => :email_domain)\n      #   fields_from_record(:include => :email_domain)\n      #   fields_from_record(:except => :email_domain, :deprecated => false)\n      #\n      def fields_from_record(options = {})\n        field_attributes = _filter_field_attributes(options)\n        field_attributes += [ options.fetch(:include, []) ]\n\n        field_attributes.flatten!\n        field_attributes.compact!\n        field_attributes.uniq!\n\n        binding.pry\n\n        field_attributes = field_attributes.inject({}) do |hash, field|\n          if _protobuf_field_transformers.has_key?(field)\n            hash[field] = _protobuf_field_transformers[field].call(self)\n          else\n            value = respond_to?(field) ? __send__(field) : nil\n            hash[field] = _protobuf_convert_attributes_to_fields(field, value)\n          end\n          hash\n        end\n\n        field_attributes\n      end\n\n      # :nodoc:\n      def _protobuf_convert_attributes_to_fields(field, value)\n        self.class._protobuf_convert_attributes_to_fields(field, value)\n      end\n\n      # :nodoc:\n      def _protobuf_field_transformers\n        self.class._protobuf_field_transformers\n      end\n\n      # :nodoc:\n      def _protobuf_message\n        self.class.protobuf_message\n      end\n\n      # :nodoc:\n      def to_proto(options = {})\n        raise MessageNotDefined.new(self.class) if _protobuf_message.nil?\n\n        fields = self.fields_from_record(options)\n        _protobuf_message.new(fields)\n      end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[95,36],[95,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8,"goalBufferRange":null},"deserializer":"Marker"},"96":{"id":96,"range":[[95,35],[95,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"97":{"id":97,"range":[[95,27],[95,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"98":{"id":98,"range":[[95,36],[95,36]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[138,0],[138,0]],"newRange":[[138,0],[139,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,0],[139,0]],"newRange":[[139,0],[139,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,0],[139,0]],"newRange":[[139,0],[140,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[140,0],[140,0]],"newRange":[[140,0],[140,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[139,0],[139,0]],"newRange":[[139,0],[139,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,8],[139,8]],"newRange":[[139,8],[139,10]],"oldText":"","newText":"  ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[139,10],[139,10]]},"newParams":{"reversed":true,"range":[[139,8],[139,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[139,8],[139,10]],"newRange":[[139,8],[139,8]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[139,8],[139,8]]},"newParams":{"range":[[139,6],[139,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[139,6],[139,8]],"newRange":[[139,6],[139,6]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[139,6],[139,6]]},"newParams":{"range":[[139,4],[139,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[139,4],[139,6]],"newRange":[[139,4],[139,4]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[139,4],[139,4]]},"newParams":{"range":[[139,2],[139,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[139,2],[139,4]],"newRange":[[139,2],[139,2]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[139,2],[139,2]],"newRange":[[139,2],[139,8]],"oldText":"","newText":"      ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[139,8],[139,8]],"newRange":[[139,8],[139,9]],"oldText":"","newText":"b","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,9],[139,9]],"newRange":[[139,9],[139,10]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,10],[139,10]],"newRange":[[139,10],[139,11]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,11],[139,11]],"newRange":[[139,11],[139,12]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,12],[139,12]],"newRange":[[139,12],[139,13]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,13],[139,13]],"newRange":[[139,13],[139,14]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,14],[139,14]],"newRange":[[139,14],[139,15]],"oldText":"","newText":"g","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,15],[139,15]],"newRange":[[139,15],[139,16]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,16],[139,16]],"newRange":[[139,16],[139,17]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,17],[139,17]],"newRange":[[139,17],[139,18]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[139,18],[139,18]],"newRange":[[139,18],[139,19]],"oldText":"","newText":"y","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[183,59],[183,59]],"newRange":[[183,59],[184,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[184,0],[184,0]],"newRange":[[184,0],[184,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[184,8],[184,8]],"newRange":[[184,8],[185,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,0],[185,0]],"newRange":[[185,0],[185,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[184,8],[184,8]],"newRange":[[184,8],[185,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,0],[185,0]],"newRange":[[185,0],[185,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[185,8],[185,8]],"newRange":[[185,8],[185,9]],"oldText":"","newText":"b","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,9],[185,9]],"newRange":[[185,9],[185,10]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,10],[185,10]],"newRange":[[185,10],[185,11]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,11],[185,11]],"newRange":[[185,11],[185,12]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,12],[185,12]],"newRange":[[185,12],[185,13]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,13],[185,13]],"newRange":[[185,13],[185,14]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,14],[185,14]],"newRange":[[185,14],[185,15]],"oldText":"","newText":"g","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,15],[185,15]],"newRange":[[185,15],[185,16]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,16],[185,16]],"newRange":[[185,16],[185,17]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,17],[185,17]],"newRange":[[185,17],[185,18]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[185,18],[185,18]],"newRange":[[185,18],[185,19]],"oldText":"","newText":"y","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[186,0],[186,8]],"newRange":[[186,0],[186,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[184,0],[184,8]],"newRange":[[184,0],[184,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[185,0],[185,19]],"newRange":[[185,0],[185,0]],"oldText":"        binding.pry","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[185,0],[185,0]]},"newParams":{"range":[[184,0],[185,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[184,0],[185,0]],"newRange":[[184,0],[184,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[184,0],[184,0]]},"newParams":{"range":[[183,59],[184,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[183,59],[184,0]],"newRange":[[183,59],[183,59]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[187,30],[187,30]],"newRange":[[187,30],[188,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[188,0],[188,0]],"newRange":[[188,0],[188,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[188,8],[188,8]],"newRange":[[188,8],[189,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[189,0],[189,0]],"newRange":[[189,0],[189,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[189,8],[189,8]],"newRange":[[189,8],[189,27]],"oldText":"","newText":"        binding.pry","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[189,0],[189,16]],"newRange":[[189,0],[189,8]],"oldText":"                ","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[188,0],[188,8]],"newRange":[[188,0],[188,0]],"oldText":"        ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"encoding":"utf8","filePath":"/Users/ah/.rvm/gems/ruby-2.2.0@amigo/gems/protobuf-activerecord-3.1.0/lib/protobuf/active_record/serialization.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e9cb6b00648e986735879997adb934c5de5b7f42","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"editorWidthInChars":null,"scrollTop":962,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ah/.rvm/gems/ruby-2.2.0@amigo/gems/protobuf-activerecord-3.1.0/lib/protobuf/active_record/serialization.rb","invisibles":null,"deserializer":"TokenizedBuffer"},"invisibles":null,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/ah/.rvm/gems/ruby-2.2.0@amigo/gems/protobuf-activerecord-3.1.0/lib/protobuf/active_record/serialization.rb","focused":false,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-ruby","language-todo","language-hyperlink"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/ah/.rvm/gems/ruby-2.2.0@amigo/gems/protobuf-activerecord-3.1.0/lib/protobuf/active_record/serialization.rb":1422663262119},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["_normalize_options","_protobuf_field_options","_filter_field_attributes","_normalize_options","_protobuf_field_options"],"replaceHistory":[],"pathsHistory":[]},"metrics":{"sessionLength":191605942},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/ah/.rvm/gems/ruby-2.2.0@amigo/gems/protobuf-activerecord-3.1.0/lib","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}