# Changing directory to code project
function c { cd $PROJECT_PATH/$1; }

# Changing directory to code project
function d { cd $PROJECT_PATH/deploys/$1; }

# Interactively rebase the current git branch
function rebase { git rebase -i HEAD~$1; }

# Search through the whole codebase
function hunt { find $PROJECT_PATH -type f -name "$1" -not -path "*vendor*" -print0 | xargs -0 ack -Q $2; }

# Prompt setup
function parse_git_branch { echo `__git_ps1`; }

# Backport changes downstream
function backport {
  gsync
  startbranch=$(git branch | grep '*' | sed -e 's/* //')
  echo 'Backporting stable > stage';
  git checkout stage
  git merge stable
  git push origin stage
  echo  'Backporting stage > qa';
  git checkout qa
  git merge stage
  git push origin qa
  echo 'Backporting qa > master';
  git checkout master
  git merge qa
  git push origin master

  curbranch=$(git branch | grep '*' | sed -e 's/* //')
  [ startbranch != curbranch ] && git checkout $startbranch
  echo "All branches have been backported."
}

# Hard-reset branches back to origin
function hardreset {
  git status
  git diff-index --quiet HEAD --
  [ $? -ne 0 ] && echo "You have local changes that haven't been committed!" && return

  git fetch origin

  failedbranches=()
  startbranch=$(git branch | grep '*' | sed -e 's/* //')
  for branch in $(git branch | sed -e 's|* ||g' -e 's|^[ ]*||')
  do
    git rev-parse origin/$branch &> /dev/null
    if [[ $? -eq 0 ]]
    then
      currev=$(git rev-parse $branch)
      syncrev=$(git rev-parse origin/$branch)
      if [[ $currev != $syncrev ]]
      then
        echo " > Resetting branch $branch to origin/$branch"
        git checkout $branch
        git reset origin/$branch --hard
      fi
    else
      echo " ! Branch $branch doesn't have an origin"
      failedbranches+=$branch
    fi
  done
  [ "${#failedbranches}" -gt 0 ] && echo " ! Failed resetting branches $failedbranches"

  curbranch=$(git branch | grep '*' | sed -e 's/* //')
  [ startbranch != curbranch ] && git checkout $startbranch
  echo "Local branches have been reset."
}

# Pull all changes from origin
function gsync {
  git status
  git diff-index --quiet HEAD --
  [ $? -ne 0 ] && echo "You have local changes that haven't been committed!" && return

  git remote prune origin
  git fetch origin

  failedbranches=()
  startbranch=$(git branch | grep '*' | sed -e 's/* //')
  for branch in $(git branch | sed -e 's|* ||g' -e 's|^[ ]*||')
  do
    git rev-parse origin/$branch &> /dev/null
    if [[ $? -eq 0 ]]
    then
      currev=$(git rev-parse $branch)
      syncrev=$(git rev-parse origin/$branch)
      if [[ $currev != $syncrev ]]
      then
        echo " > Synchronizing branch $branch"
        git checkout $branch
        git merge origin/$branch
      fi
    else
      echo " ! Branch $branch doesn't have an origin"
      failedbranches+=$branch
    fi
  done
  [ "${#failedbranches}" -gt 0 ] && echo " ! Failed syncing branches $failedbranches"

  curbranch=$(git branch | grep '*' | sed -e 's/* //')
  [ startbranch != curbranch ] && git checkout $startbranch
  echo "Local branches are in sync."
}

# Downstream out-of-date branch check
function downstream {
  echo 'Downstream out-of-date branch check';
  echo '[qa > master]';
  git cherry -v master qa;
  echo '[stage > qa]';
  git cherry -v qa stage;
  echo '[stable > stage]';
  git cherry -v stage stable;
}

# Upstream branch check
function upstream {
  echo 'Upstream branch check';
  echo '[master > qa]';
  git cherry -v qa master;
  echo '[qa > stage]';
  git cherry -v stage qa;
  echo '[stage > stable]';
  git cherry -v stable stage;
}

# Switch to latest JRuby with a gemset of the current directory
function jrb {
  rvm use jruby@${PWD##*/} --create
}

# Switch to Ruby 2.1 with a gemset of the current directory
function rb {
  rvm use 2.1.2@${PWD##*/} --create
}

# Switch to Ruby version specified in the current directory
function localrb {
  rvm use .
}
